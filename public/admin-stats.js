// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let currentStats = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', async () => {
    await loadUserInfo();
    await loadAPIStats();
    setupEventHandlers();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadUserInfo() {
    try {
        const response = await fetch('/api/user-info');
        const data = await response.json();
        
        const userInfoDiv = document.getElementById('userInfo');
        
        if (data.success && data.user) {
            userInfoDiv.innerHTML = `üë§ ${data.user.login} (–ê–¥–º–∏–Ω)`;
            userInfoDiv.className = 'session-info';
        } else {
            userInfoDiv.innerHTML = 'üë§ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞';
            userInfoDiv.className = 'session-info no-session';
            setTimeout(() => window.location.href = '/', 2000);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        document.getElementById('userInfo').innerHTML = 'üë§ –û—à–∏–±–∫–∞';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
async function loadAPIStats() {
    try {
        const response = await fetch('/api/admin/api-stats');
        const data = await response.json();
        
        if (data.success) {
            currentStats = data;
            displayTopEndpoints(data.topEndpoints);
            displayDetailedStats(data.stats);
        } else {
            if (data.error === '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞') {
                notify.error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API');
                window.location.href = '/';
                return;
            }
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API:', error);
        document.getElementById('topEndpoints').innerHTML = 
            '<div class="stats-loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
        document.getElementById('detailedStats').innerHTML = 
            '<div class="stats-loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø endpoints
function displayTopEndpoints(topEndpoints) {
    const container = document.getElementById('topEndpoints');
    
    if (topEndpoints.length === 0) {
        container.innerHTML = '<div class="stats-loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        return;
    }
    
    const table = `
        <table class="stats-table">
            <thead>
                <tr>
                    <th>Endpoint</th>
                    <th>–ó–∞–ø—Ä–æ—Å–æ–≤</th>
                    <th>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)</th>
                    <th>–û—à–∏–±–∫–∏</th>
                </tr>
            </thead>
            <tbody>
                ${topEndpoints.map(endpoint => `
                    <tr>
                        <td class="endpoint-cell">${endpoint.endpoint}</td>
                        <td class="count-cell">${endpoint.count}</td>
                        <td class="time-cell">${endpoint.avgTime}–º—Å</td>
                        <td class="error-cell">${endpoint.errorRate}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = table;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayDetailedStats(stats) {
    const container = document.getElementById('detailedStats');
    
    if (Object.keys(stats).length === 0) {
        container.innerHTML = '<div class="stats-loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        return;
    }
    
    const table = `
        <table class="stats-table">
            <thead>
                <tr>
                    <th>Endpoint</th>
                    <th>–ó–∞–ø—Ä–æ—Å–æ–≤</th>
                    <th>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</th>
                    <th>–ú–∏–Ω. –≤—Ä–µ–º—è</th>
                    <th>–ú–∞–∫—Å. –≤—Ä–µ–º—è</th>
                    <th>–û—à–∏–±–∫–∏</th>
                    <th>% –æ—à–∏–±–æ–∫</th>
                </tr>
            </thead>
            <tbody>
                ${Object.entries(stats).map(([endpoint, data]) => `
                    <tr>
                        <td class="endpoint-cell">${endpoint}</td>
                        <td class="count-cell">${data.count}</td>
                        <td class="time-cell">${data.avgTime}–º—Å</td>
                        <td class="time-cell">${data.minTime}–º—Å</td>
                        <td class="time-cell">${data.maxTime}–º—Å</td>
                        <td class="error-cell">${data.errors}</td>
                        <td class="error-cell">${data.errorRate}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = table;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    document.getElementById('refreshStatsBtn').addEventListener('click', async () => {
        await loadAPIStats();
        notify.success('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    });
    
    document.getElementById('resetStatsBtn').addEventListener('click', async () => {
        showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API?', async () => {
            try {
                const response = await fetch('/api/admin/reset-api-stats', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    notify.success(data.message);
                    await loadAPIStats();
                } else {
                    notify.error(`–û—à–∏–±–∫–∞: ${data.error}`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
            }
        });
    });
}