// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
class HistoryManager {
    constructor() {
        this.storageKey = 'telegram_bot_history';
        this.init();
    }

    init() {
        this.loadHistory();
        this.setupEventListeners();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ localStorage
    getHistory() {
        try {
            const history = localStorage.getItem(this.storageKey);
            return history ? JSON.parse(history) : {
                search: [],
                livestream: [],
                autosearch: []
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            return { search: [], livestream: [], autosearch: [] };
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ localStorage
    saveHistory(history) {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(history));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory(type, data) {
        const history = this.getHistory();
        const record = {
            id: Date.now().toString(),
            timestamp: new Date().toISOString(),
            ...data
        };
        
        history[type].unshift(record); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–º–∞–∫—Å–∏–º—É–º 50 –Ω–∞ —Ç–∏–ø)
        if (history[type].length > 50) {
            history[type] = history[type].slice(0, 50);
        }
        
        this.saveHistory(history);
        this.loadHistory(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        return record.id;
    }


    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    removeFromHistory(type, id) {
        showConfirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏?', () => {
        
            const history = this.getHistory();
            history[type] = history[type].filter(item => item.id !== id);
            this.saveHistory(history);
            this.loadHistory(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        });
    }

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('btn-delete')) {
                e.stopPropagation();
                e.preventDefault();
                
                const type = e.target.dataset.type;
                const id = e.target.dataset.id;
                
                if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏?')) {
                    const history = this.getHistory();
                    history[type] = history[type].filter(item => item.id !== id);
                    this.saveHistory(history);
                    this.loadHistory();
                }
                return false;
            }
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    loadHistory() {
        const history = this.getHistory();
        
        this.displaySearchHistory(history.search);
        this.displayLivestreamHistory(history.livestream);
        this.displayAutosearchHistory(history.autosearch);
    }


    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
    displaySearchHistory(items) {
        const container = document.getElementById('searchHistory');
        if (!container) return;

        if (items.length === 0) {
            container.innerHTML = '<p class="empty-history">–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞</p>';
            return;
        }

        container.innerHTML = items.map(item => `
            <div class="history-item" data-id="${item.id}" style="cursor: pointer;">
                <div class="history-header">
                    <span class="history-title">–ü–æ–∏—Å–∫: ${item.keywords?.join(', ') || '–ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'}</span>
                    <span class="history-date">${new Date(item.timestamp).toLocaleString('ru-RU')}</span>
                </div>
                <div class="history-details">
                    <p><strong>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</strong> ${item.keywords?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</p>
                    <p><strong>–ì—Ä—É–ø–ø –≤—ã–±—Ä–∞–Ω–æ:</strong> ${item.groupsCount || 0}</p>
                    <p><strong>–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> ${item.messagesCount || 0}</p>
                </div>
                <div class="history-actions">
                    <button onclick="historyManager.removeFromHistory('search', '${item.id}')" class="btn-delete">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `).join('');
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ Live Stream
    displayLivestreamHistory(items) {
        const container = document.getElementById('livestreamHistory');
        if (!container) return;

        if (items.length === 0) {
            container.innerHTML = '<p class="empty-history">–ò—Å—Ç–æ—Ä–∏—è Live Stream –ø—É—Å—Ç–∞</p>';
            return;
        }

        container.innerHTML = items.map(item => `
            <div class="history-item" data-id="${item.id}" onclick="viewDetails('livestream', '${item.id}')" style="cursor: pointer;">
                <div class="history-header">
                    <span class="history-title">Live Stream: ${item.channelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'}</span>
                    <span class="history-date">${new Date(item.timestamp).toLocaleString('ru-RU')}</span>
                </div>
                <div class="history-details">
                    <p><strong>–ö–∞–Ω–∞–ª:</strong> ${item.channelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                    <p><strong>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> ${item.participantsCount || 0}</p>
                </div>
                <div class="history-actions">
                    <button onclick="historyManager.removeFromHistory('livestream', '${item.id}')" class="btn-delete">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `).join('');
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
    displayAutosearchHistory(items) {
        const container = document.getElementById('autosearchHistory');
        if (!container) return;

        if (items.length === 0) {
            container.innerHTML = '<p class="empty-history">–ò—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞</p>';
            return;
        }

        container.innerHTML = items.map(item => `
            <div class="history-item" data-id="${item.id}" onclick="viewDetails('autosearch', '${item.id}')" style="cursor: pointer;">
                <div class="history-header">
                    <span class="history-title">–ê–≤—Ç–æ–ø–æ–∏—Å–∫: ${item.keywords?.join(', ') || '–ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'}</span>
                    <span class="history-date">${new Date(item.timestamp).toLocaleString('ru-RU')}</span>
                </div>
                <div class="history-details">
                    <p><strong>–ì—Ä—É–ø–ø—ã:</strong> ${item.groupsCount || 0}</p>
                    <p><strong>–ù–∞–π–¥–µ–Ω–æ:</strong> ${item.messagesCount || 0} —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                </div>
                <div class="history-actions">
                    <button onclick="historyManager.removeFromHistory('autosearch', '${item.id}')" class="btn-delete">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `).join('');
    }

setupEventListeners() {
        document.addEventListener('click', (e) => {
            // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—è–µ–º
            if (e.target.classList.contains('btn-delete')) {
                e.stopPropagation();
                e.preventDefault();
                
                const type = e.target.dataset.type;
                const id = e.target.dataset.id;
                
                if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏?')) {
                    const history = this.getHistory();
                    history[type] = history[type].filter(item => item.id !== id);
                    this.saveHistory(history);
                    this.loadHistory();
                }
                return false;
            }
            
            // –ï—Å–ª–∏ –∫–ª–∏–∫ –ù–ï –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ù–ï –ø–æ actions –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            if (!e.target.closest('.history-actions')) {
                const historyItem = e.target.closest('.history-item');
                if (historyItem) {
                    const id = historyItem.dataset.id;
                    const container = historyItem.closest('[id$="History"]');
                    if (container) {
                        const type = container.id.replace('History', '').toLowerCase();
                        window.location.href = `history-detail.html?type=${type}&id=${id}`;
                    }
                }
            }
        });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥ removeFromHistory (—É–±—Ä–∞—Ç—å confirm —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤ setupEventListeners)
    removeFromHistory(type, id) {
        const history = this.getHistory();
        history[type] = history[type].filter(item => item.id !== id);
        this.saveHistory(history);
        this.loadHistory(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    }
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.historyManager = new HistoryManager();
});