// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
let directMessageVariantCount = 1;

function addDirectMessageVariant() {
    directMessageVariantCount++;
    const container = document.querySelector('.messages-container');
    
    const messageItem = document.createElement('div');
    messageItem.className = 'message-item';
    messageItem.innerHTML = `
        <label>–í–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${directMessageVariantCount}:</label>
        <textarea class="message-variant" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${directMessageVariantCount}" rows="3"></textarea>
        <button class="remove-message" onclick="removeDirectMessage(this)">√ó</button>
    `;
    
    container.appendChild(messageItem);
    updateDirectRemoveButtons();
    updateParticipantsCalculation();
}

function removeDirectMessage(button) {
    const messageItem = button.closest('.message-item');
    messageItem.remove();
    updateDirectMessageLabels();
    updateDirectRemoveButtons();
    updateParticipantsCalculation();
}

function updateDirectMessageLabels() {
    const messageItems = document.querySelectorAll('.message-item');
    messageItems.forEach((item, index) => {
        const label = item.querySelector('label');
        const textarea = item.querySelector('textarea');
        label.textContent = `–í–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${index + 1}:`;
        textarea.placeholder = `–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ${index + 1}`;
    });
    directMessageVariantCount = messageItems.length;
}

function updateDirectRemoveButtons() {
    const removeButtons = document.querySelectorAll('.remove-message');
    const hasMultiple = removeButtons.length > 1;
    
    removeButtons.forEach(button => {
        button.style.display = hasMultiple ? 'block' : 'none';
    });
}

function getAllDirectMessageVariants() {
    const textareas = document.querySelectorAll('.message-variant');
    return Array.from(textareas)
        .map(textarea => textarea.value.trim())
        .filter(text => text.length > 0);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function parseParticipants() {
    const text = document.getElementById('participantsList').value.trim();
    if (!text) return [];
    
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    const participants = [];
    
    lines.forEach((line, index) => {
        const participant = {
            id: index + 1,
            input: line,
            type: detectParticipantType(line),
            status: 'pending'
        };
        participants.push(participant);
    });
    
    return participants;
}

function detectParticipantType(input) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ t.me
    if (input.includes('t.me/')) {
        const username = input.split('t.me/')[1];
        return 'username';
    }
    
    if (input.startsWith('@')) return 'username';
    if (input.startsWith('+') && /^\+\d+$/.test(input)) return 'phone';
    if (/^\d+$/.test(input)) return 'id';
    return 'name';
}

function updateParticipantsCount() {
    const participants = parseParticipants();
    document.getElementById('participantsCount').textContent = `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`;
    return participants.length;
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
function calculateSendingSchedule() {
    const participants = parseParticipants();
    const dailyLimit = parseInt(document.getElementById('dailyLimit').value) || 10;
    const startDate = document.getElementById('directStartDate').value;
    const startTime = document.getElementById('directStartTime').value;
    
    if (!startDate || !startTime || participants.length === 0) {
        document.getElementById('calculationResult').textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞';
        return null;
    }
    
    const startDateTime = new Date(`${startDate}T${startTime}`);
    const totalParticipants = participants.length;
    const totalDays = Math.ceil(totalParticipants / dailyLimit);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–Ω—É—Ç–∞—Ö (24 —á–∞—Å–∞ = 1440 –º–∏–Ω—É—Ç)
    const minutesPerDay = 24 * 60;
    const intervalMinutes = Math.floor(minutesPerDay / dailyLimit);
    
    const result = {
        totalParticipants,
        dailyLimit,
        totalDays,
        intervalMinutes,
        intervalHours: Math.floor(intervalMinutes / 60),
        intervalRemainingMinutes: intervalMinutes % 60,
        endDate: new Date(startDateTime.getTime() + (totalDays - 1) * 24 * 60 * 60 * 1000)
    };
    
    return result;
}

function updateParticipantsCalculation() {
    const calculation = calculateSendingSchedule();
    const resultElement = document.getElementById('calculationResult');
    
    if (!calculation) {
        resultElement.textContent = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞';
        return;
    }
    
    const { totalParticipants, dailyLimit, totalDays, intervalHours, intervalRemainingMinutes, endDate } = calculation;
    
    resultElement.innerHTML = `
        <div class="calculation-details">
            <div>üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <strong>${totalParticipants}</strong></div>
            <div>üìÖ –î–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: <strong>${totalDays}</strong></div>
            <div>‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: <strong>${intervalHours}—á ${intervalRemainingMinutes}–º–∏–Ω</strong></div>
            <div>üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: <strong>${endDate.toLocaleDateString('ru-RU')} ${endDate.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}</strong></div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async function createDirectBroadcast() {

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ Telegram –æ–ø–µ—Ä–∞—Ü–∏–∏
    try {
        const statusResponse = await fetch('/api/telegram-status');
        const statusData = await statusResponse.json();
        
        if (statusData.success && statusData.hasActiveOperation) {
            notify.error(`‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è "${statusData.operationType}" —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç.`);
            return;
        }
    } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π');
    }
    const messages = getAllDirectMessageVariants();
    const participants = parseParticipants();
    const startDate = document.getElementById('directStartDate').value;
    const startTime = document.getElementById('directStartTime').value;
    const dailyLimit = parseInt(document.getElementById('dailyLimit').value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (messages.length === 0) {
        notify.warning('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }
    
    if (participants.length === 0) {
        notify.warning('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        return;
    }
    
    if (!startDate || !startTime) {
        notify.warning('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞');
        return;
    }
    
    if (dailyLimit < 1 || dailyLimit > 15) {
        notify.warning('–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 15');
        return;
    }
    
    const scheduledTime = new Date(`${startDate}T${startTime}`);
    if (scheduledTime <= new Date()) {
        notify.warning('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
        return;
    }
    
    try {
        const response = await fetch('/api/create-direct-broadcast', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                messages: messages,
                participants: participants,
                startDateTime: scheduledTime.toISOString(),
                dailyLimit: dailyLimit
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            notify.success('–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            clearDirectBroadcastForm();
            loadDirectBroadcasts();
        } else {
            notify.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${data.error}`);
        }
    } catch (error) {
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function previewCalculation() {
    const calculation = calculateSendingSchedule();
    if (!calculation) {
        notify.warning('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
        return;
    }
    
    updateParticipantsCalculation();
    notify.info('–†–∞—Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –Ω–∏–∂–µ');
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
function clearDirectBroadcastForm() {
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messagesContainer = document.querySelector('.messages-container');
    messagesContainer.innerHTML = `
        <div class="message-item">
            <label>–í–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 1:</label>
            <textarea class="message-variant" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è" rows="3"></textarea>
            <button class="remove-message" onclick="removeDirectMessage(this)" style="display: none;">√ó</button>
        </div>
    `;
    directMessageVariantCount = 1;
    
    // –û—á–∏—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    document.getElementById('participantsList').value = '';
    updateParticipantsCount();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç
    document.getElementById('calculationResult').textContent = '–†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
}

// –§—É–Ω–∫—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
async function copyToClipboard(listType) {
    let text = '';
    let elementId = '';
    
    switch (listType) {
        case 'sent':
            elementId = 'sentList';
            break;
        case 'errors':
            elementId = 'errorsList';
            break;
        case 'remaining':
            elementId = 'remainingList';
            break;
    }
    
    const element = document.getElementById(elementId);
    if (element) {
        text = element.textContent;
    }
    
    if (text.trim()) {
        try {
            await navigator.clipboard.writeText(text);
            notify.success('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        } catch (err) {
            notify.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
        }
    } else {
        notify.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function setDefaultDirectDateTime() {
    const now = new Date();
    now.setMinutes(now.getMinutes() + 5);
    
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    
    document.getElementById('directStartDate').value = `${year}-${month}-${day}`;
    document.getElementById('directStartTime').value = `${hours}:${minutes}`;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
async function loadDirectBroadcasts() {
    try {
        const response = await fetch('/api/direct-broadcast-tasks');
        const data = await response.json();
        
        if (data.success) {
            displayDirectBroadcasts(data.tasks);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫:', error);
    }
}

function displayDirectBroadcasts(broadcasts) {
    const listElement = document.getElementById('directBroadcastsList');
    
    if (broadcasts.length === 0) {
        listElement.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</p>';
        return;
    }
    
    listElement.innerHTML = broadcasts.map(broadcast => `
        <div class="broadcast-item">
            <div class="broadcast-header">
                <div class="broadcast-info">
                    <span class="broadcast-status status-${broadcast.status}">${getDirectStatusText(broadcast.status)}</span>
                    <span>–ù–∞—á–∞–ª–æ: ${new Date(broadcast.startDateTime).toLocaleString('ru-RU')}</span>
                    <span>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${broadcast.participants.length}</span>
                    <span>–õ–∏–º–∏—Ç/–¥–µ–Ω—å: ${broadcast.dailyLimit}</span>
                </div>
                <div class="broadcast-actions">
                    <button onclick="showBroadcastDetails('${broadcast.id}')">–î–µ—Ç–∞–ª–∏</button>
                    <button onclick="deleteDirectBroadcast('${broadcast.id}')" class="delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
            <div class="broadcast-messages">
                ${broadcast.messages.map((msg, index) => `<div class="message-preview">–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}: ${msg.substring(0, 100)}${msg.length > 100 ? '...' : ''}</div>`).join('')}
            </div>
        </div>
    `).join('');
}

function getDirectStatusText(status) {
    const statusTexts = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'active': '–ê–∫—Ç–∏–≤–Ω–∞',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
    };
    return statusTexts[status] || status;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('addDirectMessageVariant').addEventListener('click', addDirectMessageVariant);
    document.getElementById('createDirectBroadcast').addEventListener('click', createDirectBroadcast);
    document.getElementById('previewCalculation').addEventListener('click', previewCalculation);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('participantsList').addEventListener('input', () => {
        updateParticipantsCount();
        updateParticipantsCalculation();
    });
    
    document.getElementById('dailyLimit').addEventListener('input', updateParticipantsCalculation);
    document.getElementById('directStartDate').addEventListener('change', updateParticipantsCalculation);
    document.getElementById('directStartTime').addEventListener('change', updateParticipantsCalculation);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setDefaultDirectDateTime();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
    loadDirectBroadcasts();
});

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async function showBroadcastDetails(broadcastId) {
    try {
        const response = await fetch(`/api/direct-broadcast-details/${broadcastId}`);
        const data = await response.json();
        
        if (data.success) {
            displayBroadcastDetails(data.details);
        } else {
            notify.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: ${data.error}`);
        }
    } catch (error) {
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
function displayBroadcastDetails(details) {
    const detailsElement = document.getElementById('broadcastDetails');
    const { task, lists } = details;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('sentCount').textContent = task.stats.sent;
    document.getElementById('errorCount').textContent = task.stats.errors;
    document.getElementById('remainingCount').textContent = task.stats.remaining;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
    document.getElementById('sentList').textContent = lists.sent.join('\n');
    document.getElementById('errorsList').textContent = lists.errors.join('\n');
    document.getElementById('remainingList').textContent = lists.remaining.join('\n');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ –¥–µ—Ç–∞–ª–µ–π
    detailsElement.style.display = 'block';
    detailsElement.scrollIntoView({ behavior: 'smooth' });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
async function deleteDirectBroadcast(broadcastId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/direct-broadcast-tasks/${broadcastId}`, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
            notify.success('–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
            loadDirectBroadcasts();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã
            document.getElementById('broadcastDetails').style.display = 'none';
        } else {
            notify.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.error}`);
        }
    } catch (error) {
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}