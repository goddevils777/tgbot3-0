// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    initializeAutoDelete();
    loadAutoDeleteTasks();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        loadAutoDeleteTasks();
    }, 5000);
});
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initializeAutoDelete() {
    document.getElementById('createAutoDeleteTask').addEventListener('click', createAutoDeleteTask);
    document.getElementById('usersList').addEventListener('input', () => {
        updateUsersCount();
        updateCalculation();
        saveFormData(); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('startDate').addEventListener('change', () => {
        updateCalculation();
        saveFormData();
    });
    document.getElementById('startTime').addEventListener('change', () => {
        updateCalculation();
        saveFormData();
    });
    document.getElementById('deleteTimer').addEventListener('change', saveFormData);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è +5 –º–∏–Ω—É—Ç
    const now = new Date();
    const in5Minutes = new Date(now.getTime() + 5 * 60 * 1000);
    
    document.getElementById('startDate').value = now.toISOString().split('T')[0];
    document.getElementById('startTime').value = in5Minutes.toTimeString().slice(0, 5);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)
    document.getElementById('startDate').min = now.toISOString().split('T')[0];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadFormData();
    
    updateCalculation();
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function parseUsersList() {
    const text = document.getElementById('usersList').value.trim();
    if (!text) return [];
    
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    const users = [];
    
    lines.forEach((line, index) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (!line || line.startsWith('#') || line.startsWith('//')) return;
        
        const user = {
            id: index + 1,
            input: line,
            type: detectUserType(line),
            status: 'pending'
        };
        users.push(user);
    });
    
    return users;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function detectUserType(input) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ t.me
    if (input.includes('t.me/')) {
        return 'username'; // –°—á–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–∫ username
    }
    
    if (input.startsWith('@')) return 'username';
    if (input.startsWith('+') && /^\+\d+$/.test(input)) return 'phone';
    if (/^\d+$/.test(input)) return 'id';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π username (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
    if (/^[a-zA-Z0-9_]+$/.test(input)) return 'username';
    
    return 'name';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateUsersCount() {
    const users = parseUsersList();
    document.getElementById('usersCount').textContent = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`;
    return users.length;
}
// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
function updateCalculation() {
    const users = parseUsersList();
    const startDate = document.getElementById('startDate').value;
    const startTime = document.getElementById('startTime').value;
    
    if (!startDate || !startTime || users.length === 0) {
        document.getElementById('calculationResult').innerHTML = 
            '<div class="calc-warning">‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞</div>';
        return;
    }
    
    const startDateTime = new Date(`${startDate}T${startTime}`);
    const now = new Date();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    if (startDateTime <= now) {
        document.getElementById('calculationResult').innerHTML = 
            '<div class="calc-warning">‚ö†Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º</div>';
        return;
    }
    
    const totalUsers = users.length;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let totalMinutes = 0;
    const intervals = [];
    
    for (let i = 0; i < totalUsers; i++) {
        // –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 15-45 –º–∏–Ω—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const randomInterval = 15 + Math.random() * 30;
        intervals.push(randomInterval);
        totalMinutes += randomInterval;
    }
    
    // –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    const averageInterval = totalUsers > 0 ? Math.round(totalMinutes / totalUsers) : 0;
    
    const estimatedEndTime = new Date(startDateTime.getTime() + totalMinutes * 60000);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤
    let adjustedEndTime = estimatedEndTime;
    if (totalMinutes > 600) { // –ë–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤
        const nightHours = Math.floor(totalMinutes / 1440) * 10; // 10 —á–∞—Å–æ–≤ –Ω–æ—á–∏ –Ω–∞ –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏
        adjustedEndTime = new Date(estimatedEndTime.getTime() + nightHours * 60 * 60000);
    }
    
    const result = {
        totalUsers,
        averageInterval,
        totalMinutes: Math.round(totalMinutes),
        estimatedEndTime: adjustedEndTime,
        duration: formatDuration(Math.round(totalMinutes)),
        minInterval: Math.round(Math.min(...intervals)),
        maxInterval: Math.round(Math.max(...intervals))
    };
    
    displayCalculation(result);
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤
function displayCalculation(result) {
    const calcDiv = document.getElementById('calculationResult');
    
    calcDiv.innerHTML = `
        <div class="calc-success">
            <div class="calc-row">
                <span class="calc-label">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</span>
                <span class="calc-value">${result.totalUsers}</span>
            </div>
            <div class="calc-row">
                <span class="calc-label">‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã:</span>
                <span class="calc-value">${result.minInterval}-${result.maxInterval} –º–∏–Ω (—Å—Ä–µ–¥–Ω–µ–µ: ${result.averageInterval})</span>
            </div>
            <div class="calc-row">
                <span class="calc-label">üïê –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</span>
                <span class="calc-value">${result.duration}</span>
            </div>
            <div class="calc-row">
                <span class="calc-label">üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</span>
                <span class="calc-value">${result.estimatedEndTime.toLocaleString('ru-RU')}</span>
            </div>
        </div>
    `;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function formatDuration(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    
    if (hours > 24) {
        const days = Math.floor(hours / 24);
        const remainingHours = hours % 24;
        return `${days} –¥–Ω. ${remainingHours} —á. ${mins} –º–∏–Ω.`;
    } else if (hours > 0) {
        return `${hours} —á. ${mins} –º–∏–Ω.`;
    } else {
        return `${mins} –º–∏–Ω.`;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
async function createAutoDeleteTask() {
    const users = parseUsersList();
    const deleteTimer = document.getElementById('deleteTimer').value;
    const startDate = document.getElementById('startDate').value;
    const startTime = document.getElementById('startTime').value;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (users.length === 0) {
        notify.warning('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }
    
    if (!startDate || !startTime) {
        notify.warning('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    const scheduledTime = new Date(`${startDate}T${startTime}`);
    if (scheduledTime <= new Date()) {
        notify.warning('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
        return;
    }
    
    try {
        const response = await fetch('/api/create-auto-delete-task', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                users: users,
                deleteTimer: deleteTimer,
                startDateTime: scheduledTime.toISOString(),
                settings: {
                    smartIntervals: true,      // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
                    avoidNightHours: true,     // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
                    checkExistingTimer: true   // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
                }
            })
        });
        
        const data = await response.json();
        
        // –í –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ createAutoDeleteTask, –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–±–∞–≤—å:
        if (data.success) {
            notify.success('–ó–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            document.getElementById('usersList').value = '';
            clearSavedData(); // –û—á–∏—â–∞–µ–º localStorage
            updateUsersCount();
            updateCalculation();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
            loadAutoDeleteTasks();
        } else {
            notify.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${data.error}`);
        }
    } catch (error) {
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
async function loadAutoDeleteTasks() {
    try {
        const response = await fetch('/api/auto-delete-tasks');
        const data = await response.json();
        
        if (data.success) {
            displayAutoDeleteTasks(data.tasks);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
function displayAutoDeleteTasks(tasks) {
    const tasksList = document.getElementById('autoDeleteTasksList');
    
    if (tasks.length === 0) {
        tasksList.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è</p>';
        return;
    }
    
    tasksList.innerHTML = tasks.map(task => {
        const totalUsers = task.totalUsers || task.users.length;
        const completedCount = task.completedUsers ? task.completedUsers.length : 0;
        const failedCount = task.failedUsers ? task.failedUsers.length : 0;
        const progressPercent = totalUsers > 0 ? Math.round((completedCount / totalUsers) * 100) : 0;
        
        const showProgress = ['scheduled', 'executing'].includes(task.status);
        
        return `
            <div class="task-item">
                <div class="task-header">
                    <div class="task-info">
                        <span class="task-status status-${task.status}">${getTaskStatusText(task.status)}</span>
                        <span>–ù–∞—á–∞–ª–æ: ${new Date(task.startDateTime).toLocaleString('ru-RU')}</span>
                        <span>–¢–∞–π–º–µ—Ä: ${getTimerText(task.deleteTimer)}</span>
                    </div>
                    <button class="delete-task" onclick="deleteAutoDeleteTask('${task.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
                
                ${showProgress ? `
                    <div class="task-progress">
                        <div class="progress-info">
                            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${completedCount}/${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span>
                            <span>${progressPercent}%</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progressPercent}%"></div>
                        </div>
                        ${failedCount > 0 ? `<div class="failed-info">–û—à–∏–±–æ–∫: ${failedCount}</div>` : ''}
                    </div>
                ` : ''}
                
                <div class="task-stats">
                    <div class="stats-item success">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedCount}</div>
                    <div class="stats-item error">‚ùå –û—à–∏–±–æ–∫: ${failedCount}</div>
                    <div class="stats-item total">üë• –í—Å–µ–≥–æ: ${totalUsers}</div>
                </div>
            </div>
        `;
    }).join('');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getTaskStatusText(status) {
    const statusTexts = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'scheduled': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
        'executing': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'failed': '–û—à–∏–±–∫–∞'
    };
    return statusTexts[status] || status;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∞–π–º–µ—Ä–∞
function getTimerText(timer) {
    const timerTexts = {
        '1day': '1 –¥–µ–Ω—å',
        '1week': '1 –Ω–µ–¥–µ–ª—è',
        '1month': '1 –º–µ—Å—è—Ü',
        'disable': '–û—Ç–∫–ª—é—á–∏—Ç—å'
    };
    return timerTexts[timer] || timer;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
async function deleteAutoDeleteTask(taskId) {
    showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?', async () => {
        try {
            const response = await fetch(`/api/auto-delete-tasks/${taskId}`, {
                method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (data.success) {
                notify.success('–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
                loadAutoDeleteTasks();
            } else {
                notify.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.error}`);
            }
        } catch (error) {
            notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveFormData() {
    const formData = {
        usersList: document.getElementById('usersList').value,
        deleteTimer: document.getElementById('deleteTimer').value,
        startDate: document.getElementById('startDate').value,
        startTime: document.getElementById('startTime').value
    };
    
    localStorage.setItem('autoDeleteFormData', JSON.stringify(formData));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadFormData() {
    const saved = localStorage.getItem('autoDeleteFormData');
    if (saved) {
        try {
            const formData = JSON.parse(saved);
            
            if (formData.usersList) {
                document.getElementById('usersList').value = formData.usersList;
                updateUsersCount();
            }
            
            if (formData.deleteTimer) {
                document.getElementById('deleteTimer').value = formData.deleteTimer;
            }
            
            // –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤ –±—É–¥—É—â–µ–º
            if (formData.startDate && formData.startTime) {
                const savedDateTime = new Date(`${formData.startDate}T${formData.startTime}`);
                if (savedDateTime > new Date()) {
                    document.getElementById('startDate').value = formData.startDate;
                    document.getElementById('startTime').value = formData.startTime;
                }
            }
            
            updateCalculation();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function clearSavedData() {
    localStorage.removeItem('autoDeleteFormData');
}