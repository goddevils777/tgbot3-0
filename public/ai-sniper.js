// AI Chat Sniper - JavaScript –ª–æ–≥–∏–∫–∞

let aiSniperActive = false;
let selectedChats = [];
let activityData = {
    todayResponses: 0,
    totalResponses: 0,
    chatStats: {},
    timeStats: {}
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    initializeAiSniper();
    loadChats();
    loadSavedSettings();
    setupEventListeners();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –∞–∫—Ç–∏–≤–µ–Ω AI Sniper
    const wasActive = localStorage.getItem('aiSniperActive');
    if (wasActive === 'true') {
        // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∫ –±—É–¥—Ç–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        aiSniperActive = true;
        updateStatusDisplay();
        
        setTimeout(async () => {
            console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AI Sniper...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            const mainPrompt = document.getElementById('mainPrompt').value.trim();
            const communicationStyle = document.querySelector('input[name="communicationStyle"]:checked')?.value;
            
            if (!mainPrompt || selectedChats.length === 0) {
                console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞');
                aiSniperActive = false;
                updateStatusDisplay();
                saveAiSniperState(false);
                return;
            }
            
            try {
                const response = await fetch('/api/start-ai-sniper', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        mainPrompt: mainPrompt,
                        communicationStyle: communicationStyle,
                        chats: selectedChats,
                        schedule: getScheduleSettings()
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    addLogEntry('üîÑ AI Sniper –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏', 'success');
                    startActivityMonitoring();
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:', data.error);
                    aiSniperActive = false;
                    updateStatusDisplay();
                    saveAiSniperState(false);
                    addLogEntry(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: ${data.error}`, 'error');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ:', error);
                aiSniperActive = false;
                updateStatusDisplay();
                saveAiSniperState(false);
                addLogEntry(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
            }
        }, 3000);
    }
    
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function initializeAiSniper() {
    updateStatusDisplay();
    loadActivityData();
    setDefaultSchedule();
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const startBtn = document.getElementById('startAiSniper');
    const stopBtn = document.getElementById('stopAiSniper');
    const testBtn = document.getElementById('testSettings');
    
    if (startBtn) startBtn.addEventListener('click', startAiSniper);
    if (stopBtn) stopBtn.addEventListener('click', stopAiSniper);
    if (testBtn) testBtn.addEventListener('click', testSettings);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
    const selectAllBtn = document.getElementById('selectAllChats');
    const clearSelectionBtn = document.getElementById('clearChatSelection');
    
    if (selectAllBtn) selectAllBtn.addEventListener('click', selectAllChats);
    if (clearSelectionBtn) clearSelectionBtn.addEventListener('click', clearChatSelection);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–º
    const clearLogBtn = document.getElementById('clearLog');
    const exportLogBtn = document.getElementById('exportLog');
    
    if (clearLogBtn) clearLogBtn.addEventListener('click', clearActivityLog);
    if (exportLogBtn) exportLogBtn.addEventListener('click', exportActivityLog);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const promptInput = document.getElementById('mainPrompt');
    if (promptInput) {
        promptInput.addEventListener('input', saveSettings);
    }
    
    document.addEventListener('change', (e) => {
        if (e.target.name === 'communicationStyle') {
            saveSettings();
        }
        if (e.target.type === 'checkbox' && e.target.closest('#chatsList')) {
            updateSelectedChats();
            updateChatsCounter();
        }
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
async function loadChats() {
    try {
        const response = await fetch('/api/groups');
        const data = await response.json();
        
        if (data.success) {
            displayChats(data.groups);
        } else {
            document.getElementById('chatsList').innerHTML = 
                '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: ' + data.error + '</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
        document.getElementById('chatsList').innerHTML = 
            '<div class="error-message">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</div>';
    }
}


// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
function displayChats(chats) {
    const chatsList = document.getElementById('chatsList');
    
    if (chats.length === 0) {
        chatsList.innerHTML = '<div class="no-chats">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤</div>';
        return;
    }
    
    chatsList.innerHTML = chats.map(chat => `
        <div class="chat-item">
            <input type="checkbox" id="chat-${chat.id}" value="${chat.id}">
            <label for="chat-${chat.id}">
                <div class="chat-info">
                    <span class="chat-name">${chat.name}</span>
                    <span class="chat-meta">${chat.type} ‚Ä¢ ${chat.participantsCount || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                </div>
            </label>
        </div>
    `).join('');
    
    updateChatsCounter();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if (window.savedChatsToRestore && window.savedChatsToRestore.length > 0) {
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:', window.savedChatsToRestore);
        restoreSelectedChats(window.savedChatsToRestore);
        window.savedChatsToRestore = null; // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    } else {
        console.log('‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
function updateChatsCounter() {
    const checkedCount = document.querySelectorAll('#chatsList input[type="checkbox"]:checked').length;
    document.getElementById('chatsCounter').textContent = `–í—ã–±—Ä–∞–Ω–æ: ${checkedCount}`;
}

// –í—ã–±—Ä–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã
function selectAllChats() {
    const checkboxes = document.querySelectorAll('#chatsList input[type="checkbox"]');
    checkboxes.forEach(checkbox => checkbox.checked = true);
    updateSelectedChats();
    updateChatsCounter();
}

// –°–Ω—è—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö —á–∞—Ç–æ–≤
function clearChatSelection() {
    const checkboxes = document.querySelectorAll('#chatsList input[type="checkbox"]');
    checkboxes.forEach(checkbox => checkbox.checked = false);
    updateSelectedChats();
    updateChatsCounter();
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (—Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)
function updateSelectedChats() {
    const checkboxes = document.querySelectorAll('#chatsList input[type="checkbox"]:checked');
    selectedChats = Array.from(checkboxes).map(checkbox => {
        const label = checkbox.nextElementSibling;
        return {
            id: checkbox.value,
            name: label.querySelector('.chat-name').textContent
        };
    });
    
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:', selectedChats);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    saveSettings();
}


// –ó–∞–ø—É—Å–∫ AI Sniper (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è)
async function startAiSniper() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
    if (aiSniperActive) {
        notify.warning('AI Sniper —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        return;
    }
    
    const mainPrompt = document.getElementById('mainPrompt').value.trim();
    const communicationStyle = document.querySelector('input[name="communicationStyle"]:checked').value;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!mainPrompt) {
        notify.warning('–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        return;
    }
    
    if (selectedChats.length === 0) {
        notify.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        return;
    }
    
    try {
        const response = await fetch('/api/start-ai-sniper', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                mainPrompt: mainPrompt,
                communicationStyle: communicationStyle,
                chats: selectedChats,
                schedule: getScheduleSettings()
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            aiSniperActive = true;
            updateStatusDisplay();
            addLogEntry('üöÄ AI Sniper –∑–∞–ø—É—â–µ–Ω', 'success');
            notify.success('AI Sniper —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            saveAiSniperState(true);

            // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            startActivityMonitoring();
            
        } else {
            notify.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${data.error}`);
        }
    } catch (error) {
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI Sniper
async function stopAiSniper() {
    try {
        const response = await fetch('/api/stop-ai-sniper', {
            method: 'POST'
        });
        
        const data = await response.json();
        
        if (data.success) {
            aiSniperActive = false;
            updateStatusDisplay();
            addLogEntry('‚èπÔ∏è AI Sniper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
            notify.success('AI Sniper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            saveAiSniperState(false);

            stopActivityMonitoring();
        } else {
            notify.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${data.error}`);
        }
    } catch (error) {
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function testSettings() {
    const mainPrompt = document.getElementById('mainPrompt').value.trim();
    
    if (!mainPrompt) {
        notify.warning('–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }
    
    try {
        addLogEntry('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI...', 'info');
        
        const response = await fetch('/api/test-ai-prompt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: mainPrompt,
                style: document.querySelector('input[name="communicationStyle"]:checked').value
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            addLogEntry(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${data.testResponse}`, 'success');
            notify.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            addLogEntry(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${data.error}`, 'error');
            notify.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${data.error}`);
        }
    } catch (error) {
        addLogEntry(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatusDisplay() {
    const statusIndicator = document.getElementById('statusIndicator');
    const statusText = document.getElementById('statusText');
    const startBtn = document.getElementById('startAiSniper');
    const stopBtn = document.getElementById('stopAiSniper');
    
    if (aiSniperActive) {
        statusIndicator.textContent = 'üü¢';
        statusText.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
        startBtn.style.display = 'none';
        stopBtn.style.display = 'inline-block';
    } else {
        statusIndicator.textContent = '‚è∏Ô∏è';
        statusText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        startBtn.style.display = 'inline-block';
        stopBtn.style.display = 'none';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('todayResponses').textContent = activityData.todayResponses;
    document.getElementById('activeChats').textContent = selectedChats.length;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
function addLogEntry(message, type = 'info') {
    const logContainer = document.getElementById('activityLog');
    const timestamp = new Date().toLocaleString('ru-RU');
    
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry log-${type}`;
    logEntry.innerHTML = `
        <span class="log-time">${timestamp}</span>
        <span class="log-message">${message}</span>
    `;
    
    // –£–¥–∞–ª—è–µ–º placeholder –µ—Å–ª–∏ –µ—Å—Ç—å
    const placeholder = logContainer.querySelector('.log-placeholder');
    if (placeholder) {
        placeholder.remove();
    }
    
    logContainer.insertBefore(logEntry, logContainer.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const entries = logContainer.querySelectorAll('.log-entry');
    if (entries.length > 100) {
        entries[entries.length - 1].remove();
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function clearActivityLog() {
    const logContainer = document.getElementById('activityLog');
    logContainer.innerHTML = '<div class="log-placeholder">–õ–æ–≥ –æ—á–∏—â–µ–Ω</div>';
    notify.success('–õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω');
}

// –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞
function exportActivityLog() {
    const entries = document.querySelectorAll('.log-entry');
    if (entries.length === 0) {
        notify.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }
    
    let logText = 'AI Chat Sniper - –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n';
    logText += '=' .repeat(50) + '\n\n';
    
    entries.forEach(entry => {
        const time = entry.querySelector('.log-time').textContent;
        const message = entry.querySelector('.log-message').textContent;
        logText += `${time}: ${message}\n`;
    });
    
    const blob = new Blob([logText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-sniper-log-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    notify.success('–õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function getScheduleSettings() {
    const startTimeInput = document.getElementById('startTime');
    const endTimeInput = document.getElementById('endTime');
    const weekdayInputs = document.querySelectorAll('.weekday-options input:checked');
    
    const startTime = startTimeInput ? startTimeInput.value : '09:00';
    const endTime = endTimeInput ? endTimeInput.value : '22:00';
    const weekdays = Array.from(weekdayInputs).map(cb => parseInt(cb.value));
    
    return {
        startTime,
        endTime,
        weekdays: weekdays.length > 0 ? weekdays : [1, 2, 3, 4, 5] // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
    };
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function setDefaultSchedule() {
    const startTimeInput = document.getElementById('startTime');
    const endTimeInput = document.getElementById('endTime');
    
    if (startTimeInput) {
        startTimeInput.value = '09:00';
    }
    if (endTimeInput) {
        endTimeInput.value = '22:00';
    }
}


// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã)
function saveSettings() {
    const settings = {
        mainPrompt: document.getElementById('mainPrompt') ? document.getElementById('mainPrompt').value : '',
        communicationStyle: document.querySelector('input[name="communicationStyle"]:checked')?.value,
        selectedChats: selectedChats, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        schedule: getScheduleSettings()
    };
    
    localStorage.setItem('aiSniperSettings', JSON.stringify(settings));
    console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI Sniper —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settings);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π)
function loadSavedSettings() {
    const saved = localStorage.getItem('aiSniperSettings');
    if (!saved) return;
    
    try {
        const settings = JSON.parse(saved);
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (settings.selectedChats && settings.selectedChats.length > 0) {
            console.log('üíæ –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —á–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', settings.selectedChats);
            window.savedChatsToRestore = settings.selectedChats;
        } else {
            console.log('‚ùå –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–µ—Ç selectedChats –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π');
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º structure settings:', Object.keys(settings));
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        if (settings.mainPrompt) {
            const promptInput = document.getElementById('mainPrompt');
            if (promptInput) {
                promptInput.value = settings.mainPrompt;
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
        if (settings.communicationStyle) {
            const styleInput = document.querySelector(`input[name="communicationStyle"][value="${settings.communicationStyle}"]`);
            if (styleInput) {
                styleInput.checked = true;
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if (settings.schedule) {
            const startTimeInput = document.getElementById('startTime');
            const endTimeInput = document.getElementById('endTime');
            
            if (settings.schedule.startTime && startTimeInput) {
                startTimeInput.value = settings.schedule.startTime;
            }
            if (settings.schedule.endTime && endTimeInput) {
                endTimeInput.value = settings.schedule.endTime;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            if (settings.schedule.weekdays) {
                settings.schedule.weekdays.forEach(day => {
                    const checkbox = document.querySelector(`.weekday-options input[value="${day}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
function restoreSelectedChats(savedChats) {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:', savedChats);
    
    savedChats.forEach(chat => {
        const checkbox = document.querySelector(`#chat-${chat.id}`);
        if (checkbox) {
            checkbox.checked = true;
            console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Ç: ${chat.name}`);
        } else {
            console.log(`‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${chat.name} (${chat.id})`);
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    updateSelectedChats();
    updateChatsCounter();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function loadActivityData() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updateStatusDisplay();
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
let activityInterval;

function startActivityMonitoring() {
    console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω');
    
    activityInterval = setInterval(async () => {
        try {
            const response = await fetch('/api/ai-sniper-stats');
            
            if (!response.ok) {
                console.warn('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                return;
            }
            
            const data = await response.json();
            
            if (data.success) {
                activityData = { ...activityData, ...data.stats };
                updateStatusDisplay();
                updateAnalytics();
            }
        } catch (error) {
            console.warn('–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É');
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
        }
    }, 15000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 15 —Å–µ–∫—É–Ω–¥
}

function stopActivityMonitoring() {
    if (activityInterval) {
        clearInterval(activityInterval);
        activityInterval = null;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function updateAnalytics() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç–∞–º
    const chatStatsElement = document.getElementById('chatStats');
    if (activityData.chatStats && Object.keys(activityData.chatStats).length > 0) {
        chatStatsElement.innerHTML = Object.entries(activityData.chatStats)
            .map(([chatName, count]) => `<div class="stat-item">${chatName}: <strong>${count}</strong></div>`)
            .join('');
    } else {
        chatStatsElement.innerHTML = '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
    const timeStatsElement = document.getElementById('timeStats');
    if (activityData.timeStats && Object.keys(activityData.timeStats).length > 0) {
        timeStatsElement.innerHTML = Object.entries(activityData.timeStats)
            .map(([hour, count]) => `<div class="stat-item">${hour}:00: <strong>${count}</strong></div>`)
            .join('');
    } else {
        timeStatsElement.innerHTML = '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
function updateCurrentTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('ru-RU');
    const currentTimeElement = document.getElementById('currentTime');
    const workingStatusElement = document.getElementById('workingStatus');
    
    if (currentTimeElement) {
        currentTimeElement.textContent = timeString;
    }
    
    if (workingStatusElement) {
        const schedule = getScheduleSettings();
        const isWorking = isCurrentlyWorkingTime(schedule);
        workingStatusElement.textContent = isWorking ? '‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è' : '‚ùå –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è';
        workingStatusElement.style.color = isWorking ? 'green' : 'red';
    }
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)
function isCurrentlyWorkingTime(schedule) {
    const now = new Date();
    const currentDay = now.getDay();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    
    if (!schedule.weekdays.includes(currentDay)) return false;
    
    const startTime = timeToMinutes(schedule.startTime);
    const endTime = timeToMinutes(schedule.endTime);
    
    // –ï—Å–ª–∏ –∫–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ - —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    if (endTime < startTime) {
        // –†–∞–±–æ—Ç–∞–µ–º —Å startTime –¥–æ 23:59 –ò–õ–ò —Å 00:00 –¥–æ endTime
        return currentTime >= startTime || currentTime <= endTime;
    } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è
        return currentTime >= startTime && currentTime <= endTime;
    }
}

function timeToMinutes(timeString) {
    const [hours, minutes] = timeString.split(':').map(Number);
    return hours * 60 + minutes;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function saveAiSniperState(isActive) {
    localStorage.setItem('aiSniperActive', isActive.toString());
}