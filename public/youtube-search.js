// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let currentResults = {
    videos: [],
    telegramLinks: [],
    analysis: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    setupEventHandlers();
    loadSettings();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
    document.getElementById('searchYouTubeBtn').addEventListener('click', searchYouTube);
    
    // Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    document.getElementById('youtubeKeyword').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            searchYouTube();
        }
    });
    
    // –¢–∞–±—ã
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            switchTab(e.target.dataset.tab);
        });
    });
    
    // –§–∏–ª—å—Ç—Ä—ã —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            filterLinks(e.target.dataset.filter);
        });
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube
async function searchYouTube() {
    const keyword = document.getElementById('youtubeKeyword').value.trim();
    const maxVideos = parseInt(document.getElementById('maxVideos').value) || 20;
    
    if (!keyword) {
        notify.warning('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    showProgress(true);
    hideResults();
    
    try {
        const response = await fetch('/api/youtube-search', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                keyword: keyword,
                maxResults: maxVideos
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            currentResults = {
                videos: data.videos,
                telegramLinks: data.telegramLinks,
                analysis: await analyzeLinks(data.telegramLinks)
            };
            
            displayResults();
            showResults();
            
            notify.success(`–ù–∞–π–¥–µ–Ω–æ ${data.videosCount} –≤–∏–¥–µ–æ –∏ ${data.linksCount} Telegram —Å—Å—ã–ª–æ–∫!`);
        } else {
            notify.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${data.error}`);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ YouTube –ø–æ–∏—Å–∫–∞:', error);
        notify.error(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    } finally {
        showProgress(false);
        saveSettings();
    }
}

// –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
async function analyzeLinks(links) {
    try {
        const response = await fetch('/api/analyze-telegram-links', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ links: links })
        });
        
        const data = await response.json();
        return data.success ? data.analysis : null;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫:', error);
        return null;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults() {
    updateStats();
    displayTelegramLinks();
    displayVideosList();
    displayAnalysis();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    document.getElementById('videosCount').textContent = `–í–∏–¥–µ–æ: ${currentResults.videos.length}`;
    document.getElementById('linksCount').textContent = `–°—Å—ã–ª–æ–∫: ${currentResults.telegramLinks.length}`;
    
    const uniqueLinks = [...new Set(currentResults.telegramLinks.map(link => link.identifier))];
    document.getElementById('uniqueCount').textContent = `–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueLinks.length}`;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Telegram —Å—Å—ã–ª–æ–∫
function displayTelegramLinks(filter = 'all') {
    const linksList = document.getElementById('linksList');
    let links = currentResults.telegramLinks;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    if (filter === 'invite') {
        links = links.filter(link => link.isInviteLink);
    } else if (filter === 'public') {
        links = links.filter(link => !link.isInviteLink);
    }
    
    if (links.length === 0) {
        linksList.innerHTML = '<p class="no-results">–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>';
        return;
    }
    
    linksList.innerHTML = links.map(link => `
        <div class="link-item ${link.isInviteLink ? 'invite-link' : 'public-link'}">
            <div class="link-header">
                <a href="${link.telegramLink}" target="_blank" class="link-url">
                    ${link.isInviteLink ? 'üîí' : 'üì¢'} ${link.telegramLink}
                </a>
                <span class="link-type">${link.isInviteLink ? '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è' : '–ü—É–±–ª–∏—á–Ω–∞—è'}</span>
            </div>
            <div class="link-source">
                <span class="video-title">üìπ ${link.videoTitle}</span>
                <span class="channel-title">üë§ ${link.channelTitle}</span>
            </div>
            <div class="link-actions">
                <button onclick="copyToClipboard('${link.telegramLink}')" class="copy-btn">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="openVideo('${link.videoId}')" class="view-btn">üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</button>
            </div>
        </div>
    `).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
function displayVideosList() {
    const videosList = document.getElementById('videosList');
    
    if (currentResults.videos.length === 0) {
        videosList.innerHTML = '<p class="no-results">–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }
    
    videosList.innerHTML = currentResults.videos.map(video => {
        const videoLinks = currentResults.telegramLinks.filter(link => link.videoId === video.videoId);
        
        return `
            <div class="video-item">
                <div class="video-thumbnail">
                    <img src="${video.thumbnails.medium?.url || video.thumbnails.default.url}" 
                         alt="${video.title}" loading="lazy">
                    <div class="links-badge">${videoLinks.length} —Å—Å—ã–ª–æ–∫</div>
                </div>
                <div class="video-info">
                    <h3 class="video-title">${video.title}</h3>
                    <p class="channel-name">üë§ ${video.channelTitle}</p>
                    <p class="publish-date">üìÖ ${new Date(video.publishedAt).toLocaleDateString('ru-RU')}</p>
                    <div class="video-description">
                        ${video.description.substring(0, 150)}${video.description.length > 150 ? '...' : ''}
                    </div>
                    <div class="video-actions">
                        <button onclick="openVideo('${video.videoId}')" class="watch-btn">üé¨ –°–º–æ—Ç—Ä–µ—Ç—å</button>
                        <button onclick="showVideoLinks('${video.videoId}')" class="links-btn">
                            üì± –°—Å—ã–ª–∫–∏ (${videoLinks.length})
                        </button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
function displayAnalysis() {
    const analysisData = document.getElementById('analysisData');
    
    if (!currentResults.analysis) {
        analysisData.innerHTML = '<p class="no-results">–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
        return;
    }
    
    const analysis = currentResults.analysis;
    
    analysisData.innerHTML = `
        <div class="analysis-grid">
            <div class="analysis-card">
                <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <div class="stat-row">
                    <span>–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫:</span>
                    <strong>${analysis.totalLinks}</strong>
                </div>
                <div class="stat-row">
                    <span>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:</span>
                    <strong>${analysis.uniqueChannels}</strong>
                </div>
            </div>
            
            <div class="analysis-card">
                <h3>üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã</h3>
                <div class="stat-row">
                    <span>Invite-—Å—Å—ã–ª–∫–∏:</span>
                    <strong>${analysis.inviteLinks.length}</strong>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${(analysis.inviteLinks.length / analysis.totalLinks) * 100}%"></div>
                </div>
            </div>
            
            <div class="analysis-card">
                <h3>üì¢ –ü—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</h3>
                <div class="stat-row">
                    <span>–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã:</span>
                    <strong>${analysis.publicChannels.length}</strong>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${(analysis.publicChannels.length / analysis.totalLinks) * 100}%"></div>
                </div>
            </div>
        </div>
        
        <div class="export-section">
            <h3>üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h3>
            <div class="export-buttons">
                <button onclick="exportLinks('all')" class="export-btn">–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫</button>
                <button onclick="exportLinks('invite')" class="export-btn">–¢–æ–ª—å–∫–æ invite-—Å—Å—ã–ª–∫–∏</button>
                <button onclick="exportLinks('public')" class="export-btn">–¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ</button>
            </div>
        </div>
    `;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
function switchTab(tabName) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    document.getElementById(tabName).classList.add('active');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
function filterLinks(filter) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-filter="${filter}"]`).classList.add('active');
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
    displayTelegramLinks(filter);
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        notify.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        notify.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube
function openVideo(videoId) {
    window.open(`https://www.youtube.com/watch?v=${videoId}`, '_blank');
}

// –ü–æ–∫–∞–∑ —Å—Å—ã–ª–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
function showVideoLinks(videoId) {
    const videoLinks = currentResults.telegramLinks.filter(link => link.videoId === videoId);
    
    if (videoLinks.length === 0) {
        notify.info('–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –Ω–µ—Ç Telegram —Å—Å—ã–ª–æ–∫');
        return;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± —Å—Å—ã–ª–æ–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    switchTab('telegram-links');
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
    const linksList = document.getElementById('linksList');
    linksList.innerHTML = videoLinks.map(link => `
        <div class="link-item ${link.isInviteLink ? 'invite-link' : 'public-link'} highlighted">
            <div class="link-header">
                <a href="${link.telegramLink}" target="_blank" class="link-url">
                    ${link.isInviteLink ? 'üîí' : 'üì¢'} ${link.telegramLink}
                </a>
                <span class="link-type">${link.isInviteLink ? '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è' : '–ü—É–±–ª–∏—á–Ω–∞—è'}</span>
            </div>
            <div class="link-actions">
                <button onclick="copyToClipboard('${link.telegramLink}')" class="copy-btn">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            </div>
        </div>
    `).join('');
    
    notify.info(`–ü–æ–∫–∞–∑–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ (${videoLinks.length})`);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å—Å—ã–ª–æ–∫
function exportLinks(type) {
    let linksToExport = currentResults.telegramLinks;
    
    if (type === 'invite') {
        linksToExport = linksToExport.filter(link => link.isInviteLink);
    } else if (type === 'public') {
        linksToExport = linksToExport.filter(link => !link.isInviteLink);
    }
    
    if (linksToExport.length === 0) {
        notify.warning('–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }
    
    const exportData = {
        exportDate: new Date().toISOString(),
        keyword: document.getElementById('youtubeKeyword').value,
        totalVideos: currentResults.videos.length,
        linksType: type,
        links: linksToExport
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { 
        type: 'application/json' 
    });
    
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `telegram-links-${type}-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    notify.success(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${linksToExport.length} —Å—Å—ã–ª–æ–∫`);
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function showProgress(show) {
    const progressSection = document.getElementById('searchProgress');
    const searchBtn = document.getElementById('searchYouTubeBtn');
    
    if (show) {
        progressSection.style.display = 'block';
        searchBtn.disabled = true;
        searchBtn.textContent = '‚è≥ –ü–æ–∏—Å–∫...';
    } else {
        progressSection.style.display = 'none';
        searchBtn.disabled = false;
        searchBtn.textContent = 'üîç –ò—Å–∫–∞—Ç—å –Ω–∞ YouTube';
    }
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showResults() {
    document.querySelector('.results-section').style.display = 'block';
}

function hideResults() {
    document.querySelector('.results-section').style.display = 'none';
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    localStorage.setItem('youtubeKeyword', document.getElementById('youtubeKeyword').value);
    localStorage.setItem('maxVideos', document.getElementById('maxVideos').value);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSettings() {
    const savedKeyword = localStorage.getItem('youtubeKeyword');
    const savedMaxVideos = localStorage.getItem('maxVideos');
    
    if (savedKeyword) {
        document.getElementById('youtubeKeyword').value = savedKeyword;
    }
    if (savedMaxVideos) {
        document.getElementById('maxVideos').value = savedMaxVideos;
    }
}