// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let allRequests = [];
let currentRequestId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', async () => {
    await loadUserInfo();
    await loadAdminRequests();
    setupEventHandlers();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadUserInfo() {
    try {
        const response = await fetch('/api/user-info');
        const data = await response.json();
        
        const userInfoDiv = document.getElementById('userInfo');
        
        if (data.success && data.user) {
            userInfoDiv.innerHTML = `üë§ ${data.user.login} (–ê–¥–º–∏–Ω)`;
            userInfoDiv.className = 'session-info';
        } else {
            userInfoDiv.innerHTML = 'üë§ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞';
            userInfoDiv.className = 'session-info no-session';
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            setTimeout(() => window.location.href = '/', 2000);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        document.getElementById('userInfo').innerHTML = 'üë§ –û—à–∏–±–∫–∞';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
async function loadAdminRequests() {
    try {
        const response = await fetch('/api/admin/requests');
        const data = await response.json();
        
        if (data.success) {
            allRequests = data.requests;
            updateStats();
            displayAdminRequests(allRequests);
        } else {
            if (data.error === '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞') {
                alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
                window.location.href = '/';
                return;
            }
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
        document.getElementById('adminRequestsList').innerHTML = 
            '<div class="requests-loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</div>';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const total = allRequests.length;
    const pending = allRequests.filter(r => r.status === 'pending').length;
    const processing = allRequests.filter(r => r.status === 'processing').length;
    const completed = allRequests.filter(r => r.status === 'completed').length;
    
    document.getElementById('totalRequests').textContent = total;
    document.getElementById('pendingRequests').textContent = pending;
    document.getElementById('processingRequests').textContent = processing;
    document.getElementById('completedRequests').textContent = completed;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
function displayAdminRequests(requests) {
    const requestsListDiv = document.getElementById('adminRequestsList');
    
    if (requests.length === 0) {
        requestsListDiv.innerHTML = '<div class="requests-loading">–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
        return;
    }
    
    const statusTexts = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    };
    
    requestsListDiv.innerHTML = requests.map(request => `
        <div class="admin-request-item">
            <div class="admin-request-header">
                <div>
                    <span class="request-id">ID: ${request.id}</span>
                    <span class="request-status status-${request.status}">
                        ${statusTexts[request.status] || request.status}
                    </span>
                </div>
                <div class="admin-request-actions">
                    <button class="process-btn" onclick="openProcessModal('${request.id}')">
                        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å
                    </button>
                    <button class="delete-btn" onclick="deleteRequest('${request.id}')">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
            <div class="request-info">
                <span>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${request.userId}</span>
                <span>‚Ä¢</span>
                <span>–°–µ—Å—Å–∏—è: ${request.sessionName}</span>
                <span>‚Ä¢</span>
                <span>–¢–µ–ª–µ—Ñ–æ–Ω: ${request.phoneNumber}</span>
                <span>‚Ä¢</span>
                <span>–°–æ–∑–¥–∞–Ω–∞: ${new Date(request.createdAt).toLocaleString('ru-RU')}</span>
            </div>
            ${request.notes ? `<div class="request-notes">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${request.notes}</div>` : ''}
        </div>
    `).join('');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
function openProcessModal(requestId) {
    const request = allRequests.find(r => r.id === requestId);
    if (!request) return;
    
    currentRequestId = requestId;
    
    document.getElementById('modalRequestInfo').innerHTML = `
        <p><strong>ID:</strong> ${request.id}</p>
        <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${request.userId}</p>
        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:</strong> ${request.sessionName}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${request.phoneNumber}</p>
        <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${new Date(request.createdAt).toLocaleString('ru-RU')}</p>
    `;
    
    document.getElementById('newStatus').value = request.status;
    document.getElementById('statusNotes').value = request.notes || '';
    
    document.getElementById('processModal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('processModal').style.display = 'none';
    currentRequestId = null;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('refreshBtn').addEventListener('click', loadAdminRequests);
    
    // –§–∏–ª—å—Ç—Ä—ã
    document.getElementById('statusFilter').addEventListener('change', applyFilters);
    document.getElementById('searchFilter').addEventListener('input', applyFilters);
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.querySelector('.close').addEventListener('click', closeModal);
    document.querySelector('.cancel-btn').addEventListener('click', closeModal);
    
    // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    document.getElementById('updateStatusBtn').addEventListener('click', updateRequestStatus);
    document.getElementById('createSessionBtn').addEventListener('click', createSessionForRequest);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', (event) => {
        if (event.target === document.getElementById('processModal')) {
            closeModal();
        }
    });
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
    const statusFilter = document.getElementById('statusFilter').value;
    const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
    
    let filteredRequests = allRequests;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter !== 'all') {
        filteredRequests = filteredRequests.filter(r => r.status === statusFilter);
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if (searchFilter) {
        filteredRequests = filteredRequests.filter(r => 
            r.id.toLowerCase().includes(searchFilter) || 
            r.phoneNumber.includes(searchFilter)
        );
    }
    
    displayAdminRequests(filteredRequests);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
async function updateRequestStatus() {
    if (!currentRequestId) return;
    
    const newStatus = document.getElementById('newStatus').value;
    const notes = document.getElementById('statusNotes').value;
    
    try {
        const response = await fetch('/api/admin/update-request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                requestId: currentRequestId,
                status: newStatus,
                notes: notes
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
            closeModal();
            await loadAdminRequests();
        } else {
            alert(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏
async function createSessionForRequest() {
    if (!currentRequestId) return;
    
    const request = allRequests.find(r => r.id === currentRequestId);
    if (!request) return;
    
    if (confirm(`–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞—è–≤–∫–∏ ${request.id}?\n–¢–µ–ª–µ—Ñ–æ–Ω: ${request.phoneNumber}\n–°–µ—Å—Å–∏—è: ${request.sessionName}`)) {
        try {
            const response = await fetch('/api/admin/create-session', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    requestId: currentRequestId,
                    sessionName: request.sessionName,
                    phoneNumber: request.phoneNumber,
                    userId: request.userId
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                alert('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞.');
                closeModal();
                await loadAdminRequests();
            } else {
                alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${data.error}`);
            }
        } catch (error) {
            alert(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async function deleteRequest(requestId) {
    const request = allRequests.find(r => r.id === requestId);
    if (!request) return;
    
    const confirmMessage = `–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É ${requestId}?\n\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${request.userId}\n` +
        `–°–µ—Å—Å–∏—è: ${request.sessionName}\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${request.phoneNumber}\n\n` +
        `${request.status === 'completed' ? '–í–ù–ò–ú–ê–ù–ò–ï: –¢–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!' : ''}`;
    
    if (!confirm(confirmMessage)) {
        return;
    }
    
    try {
        const response = await fetch(`/api/admin/delete-request/${requestId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert(`–ó–∞—è–≤–∫–∞ ${requestId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`);
            await loadAdminRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        alert(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫
async function exportRequests() {
    try {
        const response = await fetch('/api/admin/export-requests');
        const data = await response.json();
        
        if (data.success) {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const blob = new Blob([JSON.stringify(data, null, 2)], { 
                type: 'application/json' 
            });
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `imported_requests.json`; // –ò–ó–ú–ï–ù–ò–õ–ò –≠–¢–£ –°–¢–†–û–ö–£
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            alert(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${data.requests.length} –∑–∞—è–≤–æ–∫. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ imported_requests.json`);
        } else {
            alert(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${data.error}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫:', error);
        alert(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}

// –ò–º–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫
function importRequests() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = async (event) => {
        const file = event.target.files[0];
        if (!file) return;
        
        try {
            const text = await file.text();
            const data = JSON.parse(text);
            
            if (!data.requests || !Array.isArray(data.requests)) {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                return;
            }
            
            const response = await fetch('/api/admin/import-requests', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ requests: data.requests })
            });
            
            const result = await response.json();
            
            if (result.success) {
                alert(result.message);
                await loadAdminRequests(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            } else {
                alert(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${result.error}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            alert(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
        }
    };
    
    input.click();
}

// –û–±–Ω–æ–≤–∏—Ç—å setupEventHandlers –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
function setupEventHandlers() {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    document.getElementById('refreshBtn').addEventListener('click', loadAdminRequests);
    document.getElementById('statusFilter').addEventListener('change', applyFilters);
    document.getElementById('searchFilter').addEventListener('input', applyFilters);
    
    // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('exportRequestsBtn').addEventListener('click', exportRequests);
    document.getElementById('importRequestsBtn').addEventListener('click', importRequests);
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.querySelector('.close').addEventListener('click', closeModal);
    document.querySelector('.cancel-btn').addEventListener('click', closeModal);
    
    // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    document.getElementById('updateStatusBtn').addEventListener('click', updateRequestStatus);
    document.getElementById('createSessionBtn').addEventListener('click', createSessionForRequest);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', (event) => {
        if (event.target === document.getElementById('processModal')) {
            closeModal();
        }
    });
}