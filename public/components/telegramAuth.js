// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class TelegramAuthComponent {
    constructor() {
        this.authToken = null;
        this.pollInterval = null;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.checkTelegramAuthStatus();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        document.addEventListener('click', (e) => {
            if (e.target && e.target.classList.contains('telegram-login-btn')) {
                this.initiateTelegramLogin();
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    async checkTelegramAuthStatus() {
        try {
            const response = await fetch('/api/telegram-user');
            const data = await response.json();
            
            if (data.success) {
                this.updateUIForAuthenticated(data.user);
            } else {
                this.updateUIForGuest();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.updateUIForGuest();
        }
    }

    // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram
    async initiateTelegramLogin() {
        try {
            const response = await fetch('/api/telegram-auth-init', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.authToken = data.authToken;
                this.showAuthModal(data.authUrl);
                this.startPolling();
            } else {
                alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + data.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }

    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    showAuthModal(authUrl) {
        const modal = document.createElement('div');
        modal.className = 'telegram-auth-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</h3>
                    <button class="close-modal">&times;</button>
                </div>
                <div class="modal-body">
                    <p><strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong></p>
                    <ol>
                        <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Telegram"</li>
                        <li>–í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ "START"</li>
                        <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
                    </ol>
                    <div class="auth-actions">
                        <a href="${authUrl}" target="_blank" class="telegram-open-btn">
                            üì± –û—Ç–∫—Ä—ã—Ç—å Telegram
                        </a>
                    </div>
                    <div class="auth-status">
                        <div class="loading-spinner"></div>
                        <span>–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...</span>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-modal').addEventListener('click', () => {
            this.closeAuthModal();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeAuthModal();
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeAuthModal() {
        const modal = document.querySelector('.telegram-auth-modal');
        if (modal) {
            modal.remove();
        }
        this.stopPolling();
    }


    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    startPolling() {
        this.pollInterval = setInterval(async () => {
            try {
                const response = await fetch(`/api/telegram-auth-status/${this.authToken}`);
                const data = await response.json();
                
                if (data.success && data.completed) {
                    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    this.stopPolling();
                    this.closeAuthModal();
                    this.showSuccessMessage('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞!');
                    
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 1500);
                    
                } else if (!data.success || (data.success && !data.pending)) {
                    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
                    this.stopPolling();
                    this.closeAuthModal();
                    
                    if (!data.success) {
                        this.showErrorMessage(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            }
        }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
    showSuccessMessage(message) {
        const notification = document.createElement('div');
        notification.className = 'notification success';
        notification.innerHTML = `‚úÖ ${message}`;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    showErrorMessage(message) {
        const notification = document.createElement('div');
        notification.className = 'notification error';
        notification.innerHTML = `‚ùå ${message}`;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    stopPolling() {
        if (this.pollInterval) {
            clearInterval(this.pollInterval);
            this.pollInterval = null;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUIForAuthenticated(user) {
        const userInfoDiv = document.getElementById('userInfo');
        const authLinksDiv = document.getElementById('authLinks');
        const logoutBtn = document.getElementById('logoutBtn');
        
        if (userInfoDiv) {
            userInfoDiv.innerHTML = `
                <div class="telegram-user-info">
                    <span>üë§ ${user.name || user.username || user.login}</span>
                    <span class="telegram-badge">Telegram</span>
                </div>
            `;
            userInfoDiv.className = 'session-info';
        }
        
        if (authLinksDiv) authLinksDiv.style.display = 'none';
        if (logoutBtn) logoutBtn.style.display = 'block';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≥–æ—Å—Ç—è
    updateUIForGuest() {
        const userInfoDiv = document.getElementById('userInfo');
        const authLinksDiv = document.getElementById('authLinks');
        const logoutBtn = document.getElementById('logoutBtn');
        
        if (userInfoDiv) {
            userInfoDiv.innerHTML = 'üë§ –ì–æ—Å—Ç—å';
            userInfoDiv.className = 'session-info no-session';
        }
        
        if (authLinksDiv) authLinksDiv.style.display = 'flex';
        if (logoutBtn) logoutBtn.style.display = 'none';
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
    static createTelegramLoginButton(text = '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram') {
        return `
            <button class="telegram-login-btn">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.64 6.8c-.15 1.58-.8 5.42-1.13 7.19-.14.75-.42 1-.68 1.03-.58.05-1.02-.38-1.58-.75-.88-.58-1.38-.94-2.23-1.5-.99-.65-.35-1.01.22-1.59.15-.15 2.71-2.48 2.76-2.69a.2.2 0 00-.05-.18c-.06-.05-.14-.03-.21-.02-.09.02-1.49.95-4.22 2.79-.4.27-.76.41-1.08.4-.36-.01-1.04-.2-1.55-.37-.63-.2-1.13-.31-1.09-.66.02-.18.27-.36.74-.55 2.92-1.27 4.86-2.11 5.83-2.51 2.78-1.16 3.35-1.36 3.73-1.36.08 0 .27.02.39.12.1.08.13.19.14.27-.01.06.01.24 0 .38z" fill="#0088cc"/>
                </svg>
                ${text}
            </button>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function initTelegramAuth() {
    return new TelegramAuthComponent();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.TelegramAuthComponent = TelegramAuthComponent;
window.initTelegramAuth = initTelegramAuth;