const { Api } = require('telegram');

class AutoDeleteManager {
    constructor() {
        this.tasks = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
        this.activeTimeouts = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
    createTask(taskData) {
        const taskId = Date.now().toString();
        
        const task = {
            id: taskId,
            users: taskData.users.map((user, index) => ({
                ...user,
                id: index + 1,
                status: 'pending', // pending, completed, error, skipped
                processTime: null,
                error: null
            })),
            deleteTimer: taskData.deleteTimer,
            startDateTime: taskData.startDateTime,
            settings: taskData.settings,
            status: 'pending', // pending, scheduled, executing, completed
            createdAt: new Date().toISOString(),
            stats: {
                total: taskData.users.length,
                completed: 0,
                errors: 0,
                skipped: 0
            }
        };

        this.tasks.set(taskId, task);
        console.log(`–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: ${taskId}`);
        
        return task;
    }

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    scheduleTask(task, executionCallback) {
        const now = new Date();
        const startTime = new Date(task.startDateTime);
        const delay = startTime.getTime() - now.getTime();

        if (delay <= 0) {
            // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É
            if (executionCallback) {
                executionCallback(task.id);
            }
        } else {
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            const timeout = setTimeout(() => {
                if (executionCallback) {
                    executionCallback(task.id);
                }
            }, delay);
            
            this.activeTimeouts.set(task.id, timeout);
            task.status = 'scheduled';
            
            console.log(`–ó–∞–¥–∞–Ω–∏–µ ${task.id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${startTime.toLocaleString('ru-RU')}`);
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
    async executeTask(taskId, telegramClientAPI) {
        try {
            const task = this.tasks.get(taskId);
            if (!task) return;

            if (!telegramClientAPI) {
                console.log('AutoDeleteManager: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç');
                task.status = 'failed';
                task.error = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Telegram –∫–ª–∏–µ–Ω—Ç–∞';
                return;
            }

            task.status = 'executing';
            console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: ${taskId}`);
            
            await this.executeAutoDeleteOperations(task, telegramClientAPI);
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ${taskId}:`, error);
            const task = this.tasks.get(taskId);
            if (task) {
                task.status = 'failed';
                task.error = error.message;
            }
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å —É–º–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    async executeAutoDeleteOperations(task, telegramClientAPI) {
        console.log(`–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è ${task.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        task.totalUsers = task.users.length;
        task.completedUsers = [];
        task.failedUsers = [];
        task.skippedUsers = [];
        
        const now = new Date();
        
        for (let i = 0; i < task.users.length; i++) {
            const user = task.users[i];
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            const delay = this.calculateSmartInterval(i, task.settings);
            const scheduledTime = new Date(now.getTime() + delay);
            
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.input} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${scheduledTime.toLocaleString('ru-RU')} (—á–µ—Ä–µ–∑ ${Math.round(delay / (60 * 1000))} –º–∏–Ω—É—Ç)`);
            
            setTimeout(async () => {
                try {
                    const result = await this.setAutoDeleteTimer(user, task.deleteTimer, telegramClientAPI, task.settings);
                    
                    if (result.success) {
                        task.completedUsers.push(user.input);
                        task.stats.completed++;
                        user.status = 'completed';
                        user.processTime = new Date().toISOString();
                        
                        console.log(`‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è ${user.input}`);
                    } else if (result.skipped) {
                        task.skippedUsers.push({
                            user: user.input,
                            reason: result.reason
                        });
                        task.stats.skipped++;
                        user.status = 'skipped';
                        user.error = result.reason;
                        
                        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω ${user.input}: ${result.reason}`);
                    } else {
                        task.failedUsers.push({
                            user: user.input,
                            error: result.error
                        });
                        task.stats.errors++;
                        user.status = 'error';
                        user.error = result.error;
                        
                        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${user.input}: ${result.error}`);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    const totalProcessed = task.completedUsers.length + task.failedUsers.length + task.skippedUsers.length;
                    if (totalProcessed === task.totalUsers) {
                        task.status = 'completed';
                        task.completedAt = new Date().toISOString();
                        console.log(`üéâ –ó–∞–¥–∞–Ω–∏–µ ${task.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${task.stats.completed}, –û—à–∏–±–æ–∫: ${task.stats.errors}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${task.stats.skipped}`);
                    }
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${user.input}:`, error);
                    task.failedUsers.push({
                        user: user.input,
                        error: error.message
                    });
                    task.stats.errors++;
                    user.status = 'error';
                    user.error = error.message;
                }
            }, delay);
        }
        
        console.log(`üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è ${task.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    // –†–∞—Å—á–µ—Ç —É–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    calculateSmartInterval(index, settings) {
        let baseInterval;
        
        if (settings.smartIntervals) {
            // –£–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: 15-45 –º–∏–Ω—É—Ç
            baseInterval = (15 + Math.random() * 30) * 60 * 1000;
        } else {
            // –û–±—ã—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: 1-3 –º–∏–Ω—É—Ç—ã
            baseInterval = (1 + Math.random() * 2) * 60 * 1000;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sequentialDelay = index * baseInterval;
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤
        if (settings.avoidNightHours) {
            const scheduledTime = new Date(Date.now() + sequentialDelay);
            const hour = scheduledTime.getHours();
            
            // –ï—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ–º –Ω–∞ –Ω–æ—á—å (22:00 - 08:00), –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–æ —É—Ç—Ä–∞
            if (hour >= 22 || hour < 8) {
                const hoursUntilMorning = hour >= 22 ? (32 - hour) : (8 - hour); // –î–æ 8 —É—Ç—Ä–∞
                const nightDelay = hoursUntilMorning * 60 * 60 * 1000;
                return sequentialDelay + nightDelay;
            }
        }
        
        return sequentialDelay;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async setAutoDeleteTimer(user, deleteTimer, telegramClientAPI, settings) {
        try {
            if (!telegramClientAPI || !telegramClientAPI.client) {
                throw new Error('Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            }

            console.log(`–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.input} (—Ç–∏–ø: ${user.type})`);

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let targetUser;
            try {
                let searchValue = user.input;
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ t.me
                if (searchValue.includes('t.me/')) {
                    const username = searchValue.split('t.me/')[1];
                    searchValue = username;
                    console.log(`–ò–∑–≤–ª–µ—á–µ–Ω username –∏–∑ —Å—Å—ã–ª–∫–∏: ${username}`);
                }
                
                // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (searchValue.startsWith('@')) {
                    searchValue = searchValue.substring(1);
                }
                
                if (user.type === 'username' || searchValue.match(/^[a-zA-Z0-9_]+$/)) {
                    // –ü–æ–∏—Å–∫ –ø–æ username
                    console.log(`–ü–æ–∏—Å–∫ –ø–æ username: ${searchValue}`);
                    
                    try {
                        const result = await telegramClientAPI.client.invoke(
                            new Api.contacts.ResolveUsername({ username: searchValue })
                        );
                        targetUser = result.users[0];
                        console.log(`–ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ResolveUsername: ${targetUser.firstName || targetUser.username}`);
                    } catch (resolveError) {
                        console.log(`ResolveUsername –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${resolveError.message}`);
                        
                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
                        console.log('–ò—â–µ–º –≤ –¥–∏–∞–ª–æ–≥–∞—Ö...');
                        const dialogs = await telegramClientAPI.client.getDialogs({});
                        
                        for (const dialog of dialogs) {
                            if (dialog.entity && dialog.entity.username === searchValue) {
                                targetUser = dialog.entity;
                                console.log(`–ù–∞–π–¥–µ–Ω –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –ø–æ username: ${targetUser.firstName || targetUser.username}`);
                                break;
                            }
                        }
                    }
                } else if (user.type === 'phone') {
                    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                    console.log(`–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${searchValue}`);
                    const contacts = await telegramClientAPI.client.invoke(new Api.contacts.GetContacts({ hash: 0 }));
                    targetUser = contacts.users.find(u => u.phone === searchValue.replace('+', ''));
                    
                    if (targetUser) {
                        console.log(`–ù–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${targetUser.firstName || targetUser.username}`);
                    }
                } else if (user.type === 'id') {
                    // –ü–æ–∏—Å–∫ –ø–æ ID
                    console.log(`–ü–æ–∏—Å–∫ –ø–æ ID: ${searchValue}`);
                    const users = await telegramClientAPI.client.invoke(
                        new Api.users.GetUsers({ id: [parseInt(searchValue)] })
                    );
                    targetUser = users[0];
                    
                    if (targetUser) {
                        console.log(`–ù–∞–π–¥–µ–Ω –ø–æ ID: ${targetUser.firstName || targetUser.username}`);
                    }
                } else {
                    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
                    console.log(`–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏: ${searchValue}`);
                    const dialogs = await telegramClientAPI.client.getDialogs({});
                    
                    for (const dialog of dialogs) {
                        if (dialog.entity && dialog.entity.firstName && 
                            dialog.entity.firstName.toLowerCase().includes(searchValue.toLowerCase())) {
                            targetUser = dialog.entity;
                            console.log(`–ù–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏: ${targetUser.firstName}`);
                            break;
                        }
                    }
                }
                
                if (!targetUser) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.input} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º`);
                    return {
                        success: false,
                        skipped: true,
                        reason: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–∏–∞–ª–æ–≥ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'
                    };
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.input}:`, error);
                return {
                    success: false,
                    error: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`
                };
            }

            const userName = targetUser.firstName || targetUser.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            console.log(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (ID: ${targetUser.id})`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
            if (settings.checkExistingTimer) {
                try {
                    const peerSettings = await telegramClientAPI.client.invoke(
                        new Api.messages.GetPeerSettings({ peer: targetUser })
                    );
                    
                    if (peerSettings.settings && peerSettings.settings.autoDeleteTimer) {
                        console.log(`–£ ${userName} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä`);
                        return {
                            success: false,
                            skipped: true,
                            reason: '–¢–∞–π–º–µ—Ä —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
                        };
                    }
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä: ${error.message}`);
                }
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –≤ —Å–µ–∫—É–Ω–¥—ã
            const timerSeconds = this.convertTimerToSeconds(deleteTimer);
            
            console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä ${deleteTimer} (${timerSeconds} —Å–µ–∫—É–Ω–¥) –¥–ª—è ${userName}`);

            if (timerSeconds === 0) {
                // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
                await telegramClientAPI.client.invoke(
                    new Api.messages.SetHistoryTTL({
                        peer: targetUser,
                        period: 0
                    })
                );
                console.log(`–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${userName}`);
            } else {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
                await telegramClientAPI.client.invoke(
                    new Api.messages.SetHistoryTTL({
                        peer: targetUser,
                        period: timerSeconds
                    })
                );
                console.log(`–¢–∞–π–º–µ—Ä –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${userName}`);
            }

            return {
                success: true,
                message: `–¢–∞–π–º–µ—Ä ${deleteTimer} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${userName}`
            };

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è ${user.input}:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥—ã
    convertTimerToSeconds(timer) {
        const timers = {
            '1day': 24 * 60 * 60,      // 1 –¥–µ–Ω—å
            '1week': 7 * 24 * 60 * 60, // 1 –Ω–µ–¥–µ–ª—è
            '1month': 30 * 24 * 60 * 60, // 1 –º–µ—Å—è—Ü
            'disable': 0                // –û—Ç–∫–ª—é—á–∏—Ç—å
        };
        
        return timers[timer] || 0;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    getAllTasks() {
        return Array.from(this.tasks.values()).sort((a, b) => 
            new Date(b.createdAt) - new Date(a.createdAt)
        );
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    deleteTask(taskId) {
        if (this.tasks.has(taskId)) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.activeTimeouts.has(taskId)) {
                clearTimeout(this.activeTimeouts.get(taskId));
                this.activeTimeouts.delete(taskId);
            }
            
            this.tasks.delete(taskId);
            return true;
        }
        return false;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ ID
    getTask(taskId) {
        return this.tasks.get(taskId);
    }
}

module.exports = AutoDeleteManager;