const crypto = require('crypto');
const { GoogleGenerativeAI } = require('@google/generative-ai');

class AiSniperManager {
    constructor() {
        this.activeSessions = new Map(); // userId -> session data
        this.messageListeners = new Map(); // userId -> telegram listeners
        this.responseDelays = new Map(); // chatId -> last response time
        this.dailyLimits = new Map(); // chatId -> daily response count
        this.stats = new Map(); // userId -> stats

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI
        try {
            this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" }); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å
            console.log(`‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini:`, error);
            this.model = null;
        }

        this.respondedMessages = new Map(); 

    }

    // –†–µ–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ —Å Gemini (—Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏)
    async analyzeMessage(message, config) {
        try {
            const messageText = message.text || message.message || '';
            if (!messageText || messageText.length < 10) return false;
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã
            if (message.fromBot || messageText.startsWith('/')) return false;
            
            console.log(`üß† Gemini –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: "${messageText}"`);
            console.log(`üë§ –ü—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${config.mainPrompt}"`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const prompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞: "${messageText}"

    –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: "${config.mainPrompt}"

    –ó–∞–¥–∞—á–∞: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–æ–Ω–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –û—Ü–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 100. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ–º.

    –ö—Ä–∏—Ç–µ—Ä–∏–∏:
    - –ï—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞, –≥–¥–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?
    - –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–º–∞ –ø–æ–¥ –º–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å?
    - –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–∞–º–æ–º –∏–ª–∏ —Ä–µ–∫–ª–∞–º–æ–π?
    - –ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞?`;

            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            const aiResponse = response.text().trim();
            const score = parseInt(aiResponse);
            
            console.log(`ü§ñ Gemini –æ—Ç–≤–µ—Ç–∏–ª: "${aiResponse}"`);
            console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Å–∫–æ—Ä: ${score}`);
            console.log(`üéØ –ü–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: 65`);
            console.log(`‚úÖ –ë—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å: ${score > 50 ? '–î–ê' : '–ù–ï–¢'}`);
            
            return score > 50;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Gemini AI –∞–Ω–∞–ª–∏–∑–∞:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–Ω–∞–ª–∏–∑...`);
            const fallbackResult = this.calculateRelevance(messageText, config.mainPrompt) > 0.2; // –°–Ω–∏–∂–∞–µ–º —Å 0.3 –¥–æ 0.2
            console.log(`üîÑ Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${fallbackResult ? '–û–¢–í–ï–¢–ò–¢–¨' : '–ü–†–û–ü–£–°–¢–ò–¢–¨'}`);
            return fallbackResult;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å Gemini (–±–µ–∑ fallback)
    async generateResponse(originalMessage, config) {
        try {
            const messageText = originalMessage.text || originalMessage.message || '';
            const style = config.communicationStyle;
            const prompt = config.mainPrompt;
            
            // –ñ–µ—Å—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
            const aiPrompt = `–°–¢–†–û–ì–û –°–õ–ï–î–£–ô –ò–ù–°–¢–†–£–ö–¶–ò–Ø–ú:

    –°–û–û–ë–©–ï–ù–ò–ï: "${messageText}"
    –¢–í–û–Ø –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–¨: "${prompt}"
    –°–¢–ò–õ–¨: ${style}

    –ó–ê–î–ê–ß–ê: –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞.

    –ñ–ï–°–¢–ö–ò–ï –ó–ê–ü–†–ï–¢–´:
    - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã: "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–ø—ã—Ç–µ", "–∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏"
    - –ù–ï –Ω–∞—á–∏–Ω–∞–π —Å "–Ø", "–ú–Ω–µ", "–ú–æ—ë –º–Ω–µ–Ω–∏–µ"
    - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –≤ –∫–æ–Ω—Ü–µ
    - –ù–ï –ø–∏—à–∏ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã

    –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    1. –ú–∞–∫—Å–∏–º—É–º 80 —Å–∏–º–≤–æ–ª–æ–≤
    2. –í–∫–ª—é—á–∏ –ö–û–ù–ö–†–ï–¢–ù–û–ï —Å–ª–æ–≤–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
    3. –û—Ç–≤–µ—á–∞–π –∏–º–µ–Ω–Ω–æ –Ω–∞ –¢–û, —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
    4. –ó–≤—É—á–∏ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ —á–∞—Ç–µ

    –ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –û–¢–í–ï–¢–û–í:
    –ù–∞ "–ö—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∞–π—Ç—ã?" ‚Üí "–°–∞–π—Ç—ã –¥–µ–ª–∞—é —É–∂–µ 3 –≥–æ–¥–∞. –ö–∞–∫–æ–π –Ω—É–∂–µ–Ω?"
    –ù–∞ "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∫–æ–¥–æ–º" ‚Üí "–° –∫–æ–¥–æ–º –ø–æ–º–æ–≥—É. –ö–∞–∫–æ–π —è–∑—ã–∫?"
    –ù–∞ "–ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –±–∏–∑–Ω–µ—Å?" ‚Üí "–ë–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–≤–∏–≥–∞—é —á–µ—Ä–µ–∑ —Å–∞–π—Ç—ã. –ß—Ç–æ –∑–∞ —Å—Ñ–µ—Ä–∞?"

    –°–¢–ò–õ–ò:
    - friendly: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏
    - business: —á–µ—Ç–∫–æ, –ø–æ –¥–µ–ª—É
    - expert: —É–º–Ω–æ, —Å —Ñ–∞–∫—Ç–∞–º–∏
    - casual: –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º

    –¢–í–û–ô –û–¢–í–ï–¢ (—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç, –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π):`;

            if (!this.model) {
                throw new Error('Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const result = await this.model.generateContent(aiPrompt);
            const response = await result.response;
            let generatedText = response.text().trim();
            
            // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç —à–∞–±–ª–æ–Ω–æ–≤
            generatedText = generatedText.replace(/^["']|["']$/g, '');
            generatedText = generatedText.replace(/^(–û—Ç–≤–µ—Ç:|–¢–≤–æ–π –æ—Ç–≤–µ—Ç:)\s*/i, '');
            generatedText = generatedText.replace(/\.\.\.$/, '');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            const bannedPhrases = [
                '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
                '–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–ø—ã—Ç–µ',
                '–∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏',
                '—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ',
                '–º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏'
            ];
            
            const hasBannedPhrase = bannedPhrases.some(phrase => 
                generatedText.toLowerCase().includes(phrase)
            );
            
            if (hasBannedPhrase) {
                console.log(`‚ùå Gemini –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É: "${generatedText}"`);
                // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –µ—â–µ –±–æ–ª–µ–µ –∂–µ—Å—Ç–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
                return await this.generateBackupResponse(messageText, config);
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if (generatedText.length > 100) {
                generatedText = generatedText.substring(0, 97) + '...';
            }
            
            console.log(`‚úÖ Gemini —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç: "${generatedText}"`);
            return generatedText;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini:', error);
            // –ï—Å–ª–∏ Gemini –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            return this.generateSimpleContextResponse(messageText, config);
        }
    }

    // –ó–∞–ø–∞—Å–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini
    async generateBackupResponse(messageText, config) {
        try {
            const backupPrompt = `–°–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}"
    –¢–≤–æ—è —Å—Ñ–µ—Ä–∞: "${config.mainPrompt}"

    –û—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è —Å –¥—Ä—É–≥–æ–º.
    –ú–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤.
    –ë–µ–∑ –ø–∞—Ñ–æ—Å–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.

    –û—Ç–≤–µ—Ç:`;

            const result = await this.model.generateContent(backupPrompt);
            const response = await result.response;
            return response.text().trim().replace(/^["']|["']$/g, '');
            
        } catch (error) {
            return this.generateSimpleContextResponse(messageText, config);
        }
    }

    // –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≤—Å–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    generateSimpleContextResponse(messageText, config) {
        const keyword = this.extractMainKeyword(messageText);
        const responses = [
            `${keyword} –¥–µ–ª–∞—é. –ß—Ç–æ –Ω—É–∂–Ω–æ?`,
            `–° ${keyword} —Ä–∞–±–æ—Ç–∞—é. –î–µ—Ç–∞–ª–∏?`,
            `${keyword} - –º–æ—è —Ç–µ–º–∞. –û–±—Å—É–¥–∏–º?`
        ];
        return responses[Math.floor(Math.random() * responses.length)];
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    extractMainKeyword(text) {
        const keywords = ['—Å–∞–π—Ç', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∫–æ–¥', '–±–∏–∑–Ω–µ—Å', '—Å—Ç–∞—Ä—Ç–∞–ø', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'];
        return keywords.find(word => text.toLowerCase().includes(word)) || '–ø—Ä–æ–µ–∫—Ç';
    }

    // –ó–∞–ø—É—Å–∫ AI Sniper –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async startSniper(userId, config, telegramClientAPI) {
        try {
            if (this.activeSessions.has(userId)) {
                return { success: false, error: 'AI Sniper —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω' };
            }

            const sessionId = crypto.randomBytes(8).toString('hex').toUpperCase();
            
            const session = {
                id: sessionId,
                userId: userId,
                config: {
                    mainPrompt: config.mainPrompt,
                    communicationStyle: config.communicationStyle,
                    chats: config.chats,
                    schedule: config.schedule,
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    safetySettings: this.generateSafetySettings()
                },
                stats: {
                    startTime: new Date().toISOString(),
                    totalResponses: 0,
                    todayResponses: 0,
                    chatStats: {},
                    lastResetDate: new Date().toDateString()
                },
                status: 'active',
                telegramClientAPI: telegramClientAPI
            };

            this.activeSessions.set(userId, session);
            this.stats.set(userId, session.stats);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
            await this.startMessageMonitoring(userId, session);

            console.log(`AI Sniper –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å–µ—Å—Å–∏—è: ${sessionId}`);
            return { success: true, sessionId: sessionId };

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI Sniper –¥–ª—è ${userId}:`, error);
            return { success: false, error: error.message };
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    generateSafetySettings() {
        return {
            responseDelay: this.getRandomDelay(5, 20), // 5-20 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
            dailyLimit: this.getRandomNumber(5, 12), // 5-12 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ —á–∞—Ç (—É–≤–µ–ª–∏—á–∏–ª)
            typingDelay: this.getRandomNumber(3, 8), // 3-8 —Å–µ–∫—É–Ω–¥ –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞
            humanBehavior: true,
            smartFiltering: true,
            contextAware: true,
            replyToMessage: true,
            // –£–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–Ω—Å - –ø—É—Å—Ç—å AI —Ä–µ—à–∞–µ—Ç
            responseChance: 100 // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –µ—Å–ª–∏ AI —Å—á–∏—Ç–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
        };
    }

    // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    getRandomNumber(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    getRandomDelay(minMinutes, maxMinutes) {
        return this.getRandomNumber(minMinutes, maxMinutes);
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
    async startMessageMonitoring(userId, session) {
        try {
            // –ù–ï —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é –¥–ª—è AI
            session.status = 'monitoring';
            
            console.log(`AI Sniper –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (–±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            this.startPeriodicCheck(userId, session);
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ AI –¥–ª—è ${userId}:`, error);
            throw error;
        }
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    startPeriodicCheck(userId, session) {
        const checkInterval = setInterval(async () => {
            try {
                if (!this.activeSessions.has(userId)) {
                    clearInterval(checkInterval);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤
                await this.checkRecentMessages(userId, session);
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π AI:`, error);
            }
        }, 15000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        
        session.checkInterval = checkInterval;
    }


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
    async checkRecentMessages(userId, session) {
        try {
            const { config, telegramClientAPI } = session;
            
            if (!telegramClientAPI) {
                console.log(`‚ùå AI Sniper ${userId}: –ù–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç–∞`);
                return;
            }
            
            console.log(`üîç AI Sniper ${userId}: –ü—Ä–æ–≤–µ—Ä—è–µ–º ${config.chats.length} —á–∞—Ç–æ–≤...`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —á–∞—Ç
            for (const chat of config.chats) {
                try {
                    console.log(`üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç: ${chat.name} (${chat.id})`);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                    const messages = await telegramClientAPI.client.getMessages(chat.id, { limit: 3 });
                    console.log(`üì¨ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${chat.name}`);
                    
                    for (const message of messages) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        const messageAge = Date.now() - (message.date * 1000);
                        const ageMinutes = Math.floor(messageAge / (1000 * 60));
                        
                        console.log(`‚è∞ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–æ–º ${ageMinutes} –º–∏–Ω—É—Ç: "${(message.text || '').substring(0, 50)}..."`);
                        
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                        if (messageAge > 5 * 60 * 1000) {
                            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (>${5} –º–∏–Ω—É—Ç)`);
                            continue;
                        }
                        
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        try {
                            const me = await telegramClientAPI.client.getMe();
                            if (message.senderId && message.senderId.equals(me.id)) {
                                console.log(`üë§ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ`);
                                continue;
                            }
                        } catch (e) {
                            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${e.message}`);
                        }
                        
                        console.log(`ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: "${(message.text || '').substring(0, 100)}..."`);
                        
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º
                        const shouldRespond = await this.handleNewMessage(userId, session, message);
                        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: ${shouldRespond ? '–û–¢–í–ï–¢–ò–¢–¨' : '–ü–†–û–ü–£–°–¢–ò–¢–¨'}`);
                    }
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (chatError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞ ${chat.name}:`, chatError.message);
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
    }

   
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    async handleNewMessage(userId, session, message) {
        try {
            const { config } = session;
            
            console.log(`üîç handleNewMessage –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "${(message.text || '').substring(0, 50)}..."`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messageId = `${message.chatId || message.peerId?.channelId}_${message.id}`;
            if (this.respondedMessages.has(messageId)) {
                console.log(`‚ùå –£–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageId}`);
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤
            const targetChat = config.chats.find(chat => 
                chat.id == message.chatId || chat.id == message.peerId?.channelId
            );
            
            if (!targetChat) {
                console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —á–∞—Ç–∞`);
                return false;
            }
            
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —á–∞—Ç–∞: ${targetChat.name}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            if (!this.isWorkingTime(config.schedule)) {
                console.log(`‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è`);
                return false;
            }
            
            console.log(`‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
            if (!this.canRespondToChat(targetChat.id, config.safetySettings)) {
                console.log(`‚ùå –ù–µ –º–æ–∂–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç (–ª–∏–º–∏—Ç—ã/–∑–∞–¥–µ—Ä–∂–∫–∏)`);
                return false;
            }
            
            console.log(`‚úÖ –ú–æ–∂–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ AI –∞–Ω–∞–ª–∏–∑—É`);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
            console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...`);
            const shouldRespond = await this.analyzeMessage(message, config);
            console.log(`üéØ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${shouldRespond}`);
            
            if (!shouldRespond) {
                console.log(`‚ùå AI —Ä–µ—à–∏–ª –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å`);
                return false;
            }

            console.log(`üöÄ AI —Ä–µ—à–∏–ª –û–¢–í–ï–¢–ò–¢–¨! –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...`);
            
            // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            this.respondedMessages.set(messageId, Date.now());
            console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ: ${messageId}`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await this.generateAndSendResponse(userId, session, message, targetChat);
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            this.cleanupOldMessages();
            
            return true;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    cleanupOldMessages() {
        const now = Date.now();
        const dayInMs = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        
        let cleanedCount = 0;
        
        for (const [messageId, timestamp] of this.respondedMessages.entries()) {
            if (now - timestamp > dayInMs) {
                this.respondedMessages.delete(messageId);
                cleanedCount++;
            }
        }
        
        if (cleanedCount > 0) {
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    isWorkingTime(schedule) {
        const now = new Date();
        const currentDay = now.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        const currentTime = now.getHours() * 60 + now.getMinutes();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if (!schedule.weekdays.includes(currentDay)) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        const startTime = this.timeToMinutes(schedule.startTime);
        const endTime = this.timeToMinutes(schedule.endTime);
        
        return currentTime >= startTime && currentTime <= endTime;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
    timeToMinutes(timeString) {
        const [hours, minutes] = timeString.split(':').map(Number);
        return hours * 60 + minutes;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç (—Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏)
    canRespondToChat(chatId, safetySettings) {
        const now = Date.now();
        const today = new Date().toDateString();
        
        console.log(`üîç canRespondToChat –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:`, safetySettings);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
        const lastResponse = this.responseDelays.get(chatId);
        if (lastResponse) {
            const delayMs = safetySettings.responseDelay * 60 * 1000;
            const timeSinceLastResponse = now - lastResponse;
            const minutesSinceLastResponse = Math.floor(timeSinceLastResponse / (60 * 1000));
            
            console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±—ã–ª ${minutesSinceLastResponse} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
            console.log(`‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${safetySettings.responseDelay} –º–∏–Ω—É—Ç`);
            
            if (timeSinceLastResponse < delayMs) {
                console.log(`‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å (–Ω—É–∂–Ω–æ –µ—â–µ ${Math.ceil((delayMs - timeSinceLastResponse) / (60 * 1000))} –º–∏–Ω—É—Ç)`);
                return false;
            }
        } else {
            console.log(`‚úÖ –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        const dailyKey = `${chatId}-${today}`;
        const todayCount = this.dailyLimits.get(dailyKey) || 0;
        
        console.log(`üìä –°–µ–≥–æ–¥–Ω—è –æ—Ç–≤–µ—á–µ–Ω–æ: ${todayCount}/${safetySettings.dailyLimit}`);
        
        if (todayCount >= safetySettings.dailyLimit) {
            console.log(`‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        const randomChance = Math.random() * 100;
        console.log(`üé≤ –°–ª—É—á–∞–π–Ω—ã–π —à–∞–Ω—Å: ${randomChance.toFixed(1)}% (–Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ ${safetySettings.responseChance}%)`);
        
        if (randomChance > safetySettings.responseChance) {
            console.log(`‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –Ω–µ—É–¥–∞—á–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–Ω—Å`);
            return false;
        }
        
        console.log(`‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å!`);
        return true;
    }


    // –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    calculateRelevance(messageText, mainPrompt) {
        try {
            const messageWords = this.extractKeywords(messageText.toLowerCase());
            const promptWords = this.extractKeywords(mainPrompt.toLowerCase());
            
            // –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            const intersection = messageWords.filter(word => promptWords.includes(word));
            const relevance = intersection.length / Math.max(messageWords.length, 1);
            
            // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
            const contextWords = ['–ø–æ–º–æ—â—å', '–Ω—É–∂–µ–Ω', '–∏—â—É', '–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ', '–∫–∞–∫', '–≥–¥–µ', '—á—Ç–æ'];
            const hasContext = contextWords.some(word => messageText.toLowerCase().includes(word));
            
            return hasContext ? Math.min(relevance + 0.2, 1) : relevance;
            
        } catch (error) {
            return 0;
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    extractKeywords(text) {
        const stopWords = ['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–Ω–µ', '—á—Ç–æ', '—ç—Ç–æ', '–∫–∞–∫', '–µ–≥–æ', '–µ–µ', '–∏—Ö'];
        return text
            .replace(/[^\w–∞-—è\s]/gi, '')
            .split(/\s+/)
            .filter(word => word.length > 2 && !stopWords.includes(word))
            .slice(0, 10); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ–≤
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    async generateAndSendResponse(userId, session, originalMessage, targetChat) {
        try {
            const { config, telegramClientAPI } = session;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            const response = await this.generateResponse(originalMessage, config);
            if (!response) return;
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            await this.simulateHumanBehavior(config.safetySettings);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await this.sendResponse(telegramClientAPI, targetChat.id, response, originalMessage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateStats(userId, targetChat);
            
            console.log(`AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${targetChat.name}: ${response.substring(0, 50)}...`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
        }
    }

    

    // –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Å—Ç–∏–ª—è–º
    getResponseTemplates(style) {
        const templates = {
            friendly: [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –Ø –Ω–µ–¥–∞–≤–Ω–æ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å –ø–æ—Ö–æ–∂–∏–º...",
                "–û, —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.",
                "–ö–ª–∞—Å—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –≤–∏–¥–µ–Ω–∏–µ–º.",
                "–°–æ–≥–ª–∞—Å–µ–Ω! –í —Å–≤–æ–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é –ø–æ–¥–æ–±–Ω–æ–µ."
            ],
            business: [
                "–≠—Ç–æ –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ò–∑ –æ–ø—ã—Ç–∞ –∑–Ω–∞—é...",
                "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —Ç–∞–∫–∏—Ö –∑–∞–¥–∞—á...",
                "–í —Ä–∞–±–æ—á–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Å —ç—Ç–∏–º —Å—Ç–∞–ª–∫–∏–≤–∞—é—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ.",
                "–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞..."
            ],
            expert: [
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —ç—Ç–æ —Ä–µ—à–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º...",
                "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç...",
                "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ...",
                "–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ: –ø–æ–¥—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å..."
            ],
            casual: [
                "–î–∞, –∑–Ω–∞–∫–æ–º–∞—è —Å–∏—Ç—É–∞—Ü–∏—è) –°–∞–º –Ω–µ–¥–∞–≤–Ω–æ —Å —ç—Ç–∏–º —Ä–∞–∑–±–∏—Ä–∞–ª—Å—è.",
                "–ö—Å—Ç–∞—Ç–∏, —É –º–µ–Ω—è –±—ã–ª–æ –ø–æ—Ö–æ–∂–µ–µ. –î–µ–ª–∞–ª —Ç–∞–∫...",
                "–ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...",
                "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ê —è –æ–±—ã—á–Ω–æ –≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö..."
            ]
        };
        
        return templates[style] || templates.friendly;
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    fillTemplate(template, messageText, prompt) {
        // –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        const maxLength = 200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫–∏–π –Ω–∞–º–µ–∫ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        const hints = this.extractHintsFromPrompt(prompt);
        const hint = hints[Math.floor(Math.random() * hints.length)];
        
        let response = template;
        if (hint && Math.random() > 0.5) { // 50% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–º–µ–∫
            response += ` ${hint}`;
        }
        
        // –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if (response.length > maxLength) {
            response = response.substring(0, maxLength - 3) + '...';
        }
        
        return response;
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–º–µ–∫–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    extractHintsFromPrompt(prompt) {
        return [
            "–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É, –ø–æ–º–æ–≥—É!",
            "–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
            "–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.",
            "–ú–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."
        ];
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    async simulateHumanBehavior(safetySettings) {
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        const delay = this.getRandomNumber(
            safetySettings.typingDelay * 1000,
            safetySettings.typingDelay * 2000
        );
        
        await new Promise(resolve => setTimeout(resolve, delay));
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    async sendResponse(telegramClientAPI, chatId, responseText, originalMessage) {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ reply –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            await telegramClientAPI.client.sendMessage(chatId, {
                message: responseText,
                replyToMsgId: originalMessage.id
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStats(userId, targetChat) {
        const session = this.activeSessions.get(userId);
        if (!session) return;
        
        const now = Date.now();
        const today = new Date().toDateString();
        const chatId = targetChat.id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        this.responseDelays.set(chatId, now);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        const dailyKey = `${chatId}-${today}`;
        const currentCount = this.dailyLimits.get(dailyKey) || 0;
        this.dailyLimits.set(dailyKey, currentCount + 1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        session.stats.totalResponses++;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω—è –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if (session.stats.lastResetDate !== today) {
            session.stats.todayResponses = 0;
            session.stats.lastResetDate = today;
        }
        
        session.stats.todayResponses++;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º
        if (!session.stats.chatStats[targetChat.name]) {
            session.stats.chatStats[targetChat.name] = 0;
        }
        session.stats.chatStats[targetChat.name]++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.set(userId, session.stats);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI Sniper
    async stopSniper(userId) {
        try {
            const session = this.activeSessions.get(userId);
            if (!session) {
                return { success: false, error: 'AI Sniper –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' };
            }
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            const messageHandler = this.messageListeners.get(userId);
            if (messageHandler && session.telegramClientAPI) {
                session.telegramClientAPI.client.removeEventHandler(messageHandler);
            }
            
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.activeSessions.delete(userId);
            this.messageListeners.delete(userId);
            
            console.log(`AI Sniper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return { success: true };
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AI Sniper –¥–ª—è ${userId}:`, error);
            return { success: false, error: error.message };
        }
    }


    // –í –º–µ—Ç–æ–¥–µ getStats –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    getStats(userId) {
        const stats = this.stats.get(userId);
        if (!stats) {
            return {
                todayResponses: 0,
                totalResponses: 0,
                chatStats: {},
                timeStats: {},
                respondedMessagesCount: 0
            };
        }
        
        return {
            todayResponses: stats.todayResponses,
            totalResponses: stats.totalResponses,
            chatStats: stats.chatStats,
            timeStats: this.generateTimeStats(),
            respondedMessagesCount: this.respondedMessages.size
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    generateTimeStats() {
        const stats = {};
        const currentHour = new Date().getHours();
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        for (let i = 0; i < 24; i++) {
            stats[i] = i === currentHour ? this.getRandomNumber(1, 5) : 0;
        }
        
        return stats;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    isActive(userId) {
        return this.activeSessions.has(userId);
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    async testPrompt(prompt, style) {
        try {
            const templates = this.getResponseTemplates(style);
            const template = templates[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
            
            const testResponse = this.fillTemplate(template, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", prompt);
            
            return {
                success: true,
                testResponse: testResponse,
                analysis: {
                    style: style,
                    promptKeywords: this.extractKeywords(prompt.toLowerCase()),
                    responseLength: testResponse.length
                }
            };
            
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
}

module.exports = AiSniperManager;