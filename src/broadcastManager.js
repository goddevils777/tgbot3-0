class BroadcastManager {
    constructor(telegramClient) {
        this.telegramClient = telegramClient;
        this.tasks = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
        this.activeIntervals = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    createTask(taskData) {
        const taskId = Date.now().toString();
        const task = {
            id: taskId,
            messages: taskData.messages,
            groups: taskData.groups,
            startDateTime: taskData.startDateTime,
            frequency: taskData.frequency,
            isRandomBroadcast: taskData.isRandomBroadcast || false,
            status: 'pending',
            createdAt: new Date().toISOString(),
            nextRun: taskData.startDateTime
        };

        this.tasks.set(taskId, task);
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å UserSessionManager
        console.log(`–ó–∞–¥–∞–Ω–∏–µ ${task.id} —Å–æ–∑–¥–∞–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ UserSessionManager`);
        
        return task;
    }

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    scheduleTask(task, executionCallback) {
        const now = new Date();
        const startTime = new Date(task.startDateTime);
        const delay = startTime.getTime() - now.getTime();

        if (delay <= 0) {
            // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É —á–µ—Ä–µ–∑ callback
            if (executionCallback) {
                executionCallback(task.id);
            }
        } else {
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback
            setTimeout(() => {
                if (executionCallback) {
                    executionCallback(task.id);
                }
            }, delay);
        }
    }

    // –ù–∞–π–¥–∏ –º–µ—Ç–æ–¥ executeTask –∏ –æ–±–Ω–æ–≤–∏ –µ–≥–æ:
   async executeTask(taskId, telegramClientAPI) {
    try {
        const task = this.tasks.get(taskId);
        if (!task) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        if (!telegramClientAPI) {
            console.log('BroadcastManager: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç');
            task.status = 'failed';
            task.error = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Telegram –∫–ª–∏–µ–Ω—Ç–∞';
            return;
        }

        task.status = 'executing';
        console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: ${taskId}`);
        
        if (task.isRandomBroadcast) {
            await this.executeRandomBroadcast(task, telegramClientAPI);
        } else {
            await this.executeNormalBroadcast(task, telegramClientAPI);
            // –î–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º
            task.status = 'completed';
            task.completedAt = new Date().toISOString();
            console.log(`–ó–∞–¥–∞–Ω–∏–µ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        }
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ${taskId}:`, error);
        const task = this.tasks.get(taskId);
        if (task) {
            task.status = 'failed';
            task.error = error.message;
        }
    }
}

    // –û–±–Ω–æ–≤–∏ executeNormalBroadcast:
    async executeNormalBroadcast(task, telegramClientAPI) {
        for (const group of task.groups) {
            try {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
                const randomMessage = task.messages[Math.floor(Math.random() * task.messages.length)];
                await this.sendMessage(group, randomMessage, telegramClientAPI);

                await this.delay(2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É ${group.name}:`, error);
                task.failedGroups = task.failedGroups || [];
                task.failedGroups.push({
                    group: group.name,
                    error: error.message
                });
            }
        }
    }


// // –†–∞–Ω–¥–æ–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ —Å —É–º–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä—É–ø–ø
async executeRandomBroadcast(task, telegramClientAPI) {
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${task.groups.length} –≥—Ä—É–ø–ø`);
    
    task.status = 'scheduled';
    task.totalGroups = task.groups.length;
    task.completedGroups = [];
    task.failedGroups = [];
    task.skippedGroups = []; // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    task.scheduledTimes = {};
    
    const now = new Date();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø...');
    
    for (const group of task.groups) {
        const status = await this.checkGroupStatus(group, telegramClientAPI);
        
        if (!status.canSend) {
            console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É ${group.name}: ${status.reason}`);
            task.skippedGroups.push({
                group: group.name,
                reason: status.reason
            });
            continue;
        }
        
        if (status.warning) {
            console.log(`‚ö†Ô∏è  –ì—Ä—É–ø–ø–∞ ${group.name}: ${status.reason}`);
        } else {
            console.log(`‚úÖ –ì—Ä—É–ø–ø–∞ ${group.name}: ${status.reason}`);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        let smartDelay = this.calculateSmartInterval();

        // –î–ª—è –ø–µ—Ä–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        const groupIndex = task.groups.indexOf(group);
        const baseDelay = groupIndex * (20 + Math.random() * 10) * 60 * 1000; // 20-30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        smartDelay = Math.max(smartDelay, baseDelay);

        const scheduledTime = new Date(now.getTime() + smartDelay);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        task.scheduledTimes[group.name] = scheduledTime.toISOString();
        
        console.log(`üìÖ –ì—Ä—É–ø–ø–∞ ${group.name} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${scheduledTime.toLocaleString('ru-RU')} (—á–µ—Ä–µ–∑ ${Math.round(smartDelay / (1000 * 60))} –º–∏–Ω—É—Ç)`);
        
        setTimeout(async () => {
            try {
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                const finalCheck = await this.checkGroupStatus(group, telegramClientAPI);
                
                if (!finalCheck.canSend) {
                    console.log(`‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${group.name} - ${finalCheck.reason}`);
                    task.skippedGroups.push({
                        group: group.name,
                        reason: `–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${finalCheck.reason}`
                    });
                    return;
                }
                
                const randomMessage = task.messages[Math.floor(Math.random() * task.messages.length)];
                await this.sendMessage(group, randomMessage, telegramClientAPI);
                
                // –û—Ç–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                task.completedGroups.push(group.name);
                
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${group.name}. –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.completedGroups.length}/${task.totalGroups}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                const totalProcessed = task.completedGroups.length + task.failedGroups.length + task.skippedGroups.length;
                if (totalProcessed === task.totalGroups) {
                    task.status = 'completed';
                    task.completedAt = new Date().toISOString();
                    console.log(`üéâ –ó–∞–¥–∞–Ω–∏–µ ${task.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${task.completedGroups.length}, –û—à–∏–±–æ–∫: ${task.failedGroups.length}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${task.skippedGroups.length}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É ${group.name}:`, error);
                task.failedGroups.push({ 
                    group: group.name, 
                    error: error.message 
                });
            }
        }, smartDelay);
    }
    
    console.log(`üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${task.groups.length - task.skippedGroups.length} –≥—Ä—É–ø–ø, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${task.skippedGroups.length}`);
}

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    scheduleNextRun(task) {
        const intervals = {
            'hourly': 60 * 60 * 1000,           // 1 —á–∞—Å
            '2hourly': 2 * 60 * 60 * 1000,     // 2 —á–∞—Å–∞
            '4hourly': 4 * 60 * 60 * 1000,     // 4 —á–∞—Å–∞
            'daily': 24 * 60 * 60 * 1000       // 24 —á–∞—Å–∞
        };

        const intervalMs = intervals[task.frequency];
        if (!intervalMs) return;

        const nextRun = new Date(Date.now() + intervalMs);
        task.nextRun = nextRun.toISOString();
        task.status = 'pending';

        console.log(`–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è ${task.id}: ${nextRun.toLocaleString('ru-RU')}`);

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        setTimeout(() => {
            this.executeTask(task);
        }, intervalMs);
    }

    // –û–±–Ω–æ–≤–∏ sendMessage:
    async sendMessage(group, message, telegramClientAPI) {
        if (!telegramClientAPI || !telegramClientAPI.client) {
            throw new Error('TelegramClientAPI –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
        try {
            console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${group.name}`);
            
            await telegramClientAPI.client.sendMessage(group.id, {
                message: message
            });
            
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${group.name}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É ${group.name}:`, error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    getAllTasks() {
        return Array.from(this.tasks.values()).sort((a, b) => 
            new Date(b.createdAt) - new Date(a.createdAt)
        );
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    deleteTask(taskId) {
        if (this.tasks.has(taskId)) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.activeIntervals.has(taskId)) {
                clearInterval(this.activeIntervals.get(taskId));
                this.activeIntervals.delete(taskId);
            }
            
            this.tasks.delete(taskId);
            return true;
        }
        return false;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ ID
    getTask(taskId) {
        return this.tasks.get(taskId);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    // –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    calculateSmartInterval() {
        const now = new Date();
        const currentHour = now.getHours();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º "—Ö–æ—Ä–æ—à–∏–µ" —á–∞—Å—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏–∑–±–µ–≥–∞–µ–º –Ω–æ—á—å)
        const goodHours = [8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21];
        const isWeekend = now.getDay() === 0 || now.getDay() === 6;
        
        console.log(`üïê –¢–µ–∫—É—â–∏–π —á–∞—Å: ${currentHour}, –≤—ã—Ö–æ–¥–Ω–æ–π: ${isWeekend}`);
        
        // –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 15-45 –º–∏–Ω—É—Ç
        let baseInterval = (15 + Math.random() * 30) * 60 * 1000;
        
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å "–ø–ª–æ—Ö–æ–µ" –≤—Ä–µ–º—è, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if (!goodHours.includes(currentHour)) {
            let nextGoodHour;
            if (currentHour < 8) {
                nextGoodHour = 8; // –î–æ —É—Ç—Ä–∞
            } else if (currentHour > 21) {
                nextGoodHour = 8 + 24; // –î–æ –∑–∞–≤—Ç—Ä–∞
            } else {
                nextGoodHour = 14; // –ü–æ—Å–ª–µ –æ–±–µ–¥–∞
            }
            
            const hoursUntilGoodTime = nextGoodHour - currentHour;
            const delayUntilGoodTime = hoursUntilGoodTime * 60 * 60 * 1000;
            
            console.log(`‚è∞ –ü–ª–æ—Ö–æ–µ –≤—Ä–µ–º—è! –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ ${hoursUntilGoodTime} —á–∞—Å–æ–≤ –¥–æ ${nextGoodHour % 24}:00`);
            
            return delayUntilGoodTime + baseInterval;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        const weekendMultiplier = isWeekend ? 1.5 : 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±50%
        const randomness = 0.5 + Math.random();
        
        const finalInterval = Math.floor(baseInterval * weekendMultiplier * randomness);
        
        console.log(`‚è±Ô∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(finalInterval / (60 * 1000))} –º–∏–Ω—É—Ç`);
        
        return finalInterval;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    async checkGroupStatus(group, telegramClientAPI) {
        try {
            if (!telegramClientAPI || !telegramClientAPI.client) {
                return { canSend: false, reason: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram' };
            }

            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã: ${group.name}`);

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            const entity = await telegramClientAPI.client.getEntity(group.id);
            
            if (!entity) {
                return { canSend: false, reason: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –º—ã
            if (entity.left) {
                return { canSend: false, reason: '–ú—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã' };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            if (entity.defaultBannedRights && entity.defaultBannedRights.sendMessages) {
                return { canSend: false, reason: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π' };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã (–µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            try {
                const messages = await telegramClientAPI.client.getMessages(entity, { limit: 10 });
                
                if (messages.length === 0) {
                    return { canSend: true, reason: '–ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞—è, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞', warning: true };
                }

                const lastMessage = messages[0];
                const lastMessageDate = new Date(lastMessage.date * 1000);
                const daysSinceLastMessage = (Date.now() - lastMessageDate.getTime()) / (1000 * 60 * 60 * 24);

                if (daysSinceLastMessage > 30) {
                    return { canSend: true, reason: '–ì—Ä—É–ø–ø–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è (30+ –¥–Ω–µ–π –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π)', warning: true };
                }

                return { canSend: true, reason: '–ì—Ä—É–ø–ø–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞' };

            } catch (messagesError) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ${group.name}:`, messagesError.message);
                return { canSend: true, reason: '–ì—Ä—É–ø–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)', warning: true };
            }

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã ${group.name}:`, error.message);
            
            // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            if (error.message.includes('No entity') || error.message.includes('CHANNEL_INVALID')) {
                return { canSend: false, reason: '–ì—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞' };
            }
            
            if (error.message.includes('CHAT_ADMIN_REQUIRED')) {
                return { canSend: false, reason: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ' };
            }

            // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            return { canSend: true, reason: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', warning: true };
        }
    }
}

module.exports = BroadcastManager;