const { google } = require('googleapis');

class YouTubeParser {
    constructor() {
        this.youtube = google.youtube({
            version: 'v3',
            auth: process.env.YOUTUBE_API_KEY
        });
    }


// –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
async searchVideos(keyword, maxResults = 200, options = {}) {
    try {
        console.log(`YouTube –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–∏–∫—É: "${keyword}"`);
        
        const allVideos = [];
        const maxPerRequest = 50; // –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        let nextPageToken = null;
        let totalRequested = 0;
        
        while (totalRequested < maxResults) {
            const remainingResults = Math.min(maxPerRequest, maxResults - totalRequested);
            
            const searchParams = {
                part: 'snippet',
                q: keyword,
                type: 'video',
                maxResults: remainingResults,
                order: 'relevance',
                videoDuration: 'medium' // –ò—Å–∫–ª—é—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ (< 4 –º–∏–Ω)
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (nextPageToken) {
                searchParams.pageToken = nextPageToken;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if (options.publishedAfter) {
                searchParams.publishedAfter = options.publishedAfter;
            }
            if (options.publishedBefore) {
                searchParams.publishedBefore = options.publishedBefore;
            }
            
            console.log(`–ó–∞–ø—Ä–æ—Å ${Math.floor(totalRequested/50) + 1}: –ø–æ–ª—É—á–∞–µ–º ${remainingResults} –≤–∏–¥–µ–æ`);
            
            const response = await this.youtube.search.list(searchParams);
            
            if (response.data.items && response.data.items.length > 0) {
                allVideos.push(...response.data.items);
                totalRequested += response.data.items.length;
                
                console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${response.data.items.length} –≤–∏–¥–µ–æ, –≤—Å–µ–≥–æ: ${allVideos.length}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                nextPageToken = response.data.nextPageToken;
                if (!nextPageToken) {
                    console.log('–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç');
                    break;
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            } else {
                console.log('–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç');
                break;
            }
        }
        
        console.log(`–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${allVideos.length} –≤–∏–¥–µ–æ`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ
        console.log('–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ...');
        
        const videoIds = allVideos.map(item => item.id.videoId);
        const videoDetails = await this.getVideoDetails(videoIds);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ø–æ–ª–Ω—ã–µ
        const videosWithFullDescriptions = allVideos.map(video => {
            const detail = videoDetails.find(d => d.id === video.id.videoId);
            if (detail) {
                video.snippet.description = detail.snippet.description;
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è: ${video.snippet.title.substring(0, 50)}...`);
            }
            return video;
        });
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∏–¥–µ–æ
        videosWithFullDescriptions.slice(0, 5).forEach((item, index) => {
            console.log(`${index + 1}. ${item.snippet.title}`);
            console.log(`   –ö–∞–Ω–∞–ª: ${item.snippet.channelTitle}`);
            console.log(`   ID: ${item.id.videoId}`);
            console.log('---');
        });
        
        return videosWithFullDescriptions
            .filter(item => {
                const title = item.snippet.title.toLowerCase();
                const isShorts = title.includes('#shorts') || title.includes('shorts');
                
                if (isShorts) {
                    console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Shorts: ${item.snippet.title}`);
                    return false;
                }
                
                return true;
            })
            .map(item => ({
                videoId: item.id.videoId,
                title: item.snippet.title,
                channelTitle: item.snippet.channelTitle,
                description: item.snippet.description,
                publishedAt: item.snippet.publishedAt,
                thumbnails: item.snippet.thumbnails
            }));

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube:', error);
        throw new Error(`YouTube API –æ—à–∏–±–∫–∞: ${error.message}`);
    }
}


// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Telegram —Å—Å—ã–ª–æ–∫ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π
extractTelegramLinks(videos) {
    const telegramLinks = [];
    
    console.log('\n=== –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û –ù–ê TELEGRAM –°–°–´–õ–ö–ò ===');
    
    videos.forEach((video, videoIndex) => {
        const description = video.description || '';
        
        console.log(`\n${videoIndex + 1}. –í–∏–¥–µ–æ: ${video.title}`);
        console.log(`   –ö–∞–Ω–∞–ª: ${video.channelTitle}`);
        console.log(`   URL: https://www.youtube.com/watch?v=${video.videoId}`);
        console.log(`   üìÑ –ü–û–õ–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï: "${description}"`);
        
        // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const testDescription = "https://t.me/grayacademybot?start=7video https://t.me/+8G7ajy7RfQY4Y2Y6 https://t.me/+OOg3OhKVdboxOWVk";
        console.log(`   üß™ –¢–ï–°–¢ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ: "${testDescription}"`);
        
        // –†–∞–∑–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const regex1 = /(?:https?:\/\/)?(?:t\.me\/|telegram\.me\/|telegram\.dog\/)([a-zA-Z0-9_+\-\.\/=\?]{1,100})/gi;
        const regex2 = /https?:\/\/t\.me\/[^\s]+/gi;
        const regex3 = /t\.me\/[^\s]+/gi;
        
        console.log(`   üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–£–õ–Ø–†–û–ö:`);
        
        const test1 = [...testDescription.matchAll(regex1)];
        const test2 = [...testDescription.matchAll(regex2)];
        const test3 = [...testDescription.matchAll(regex3)];
        
        console.log(`      Regex1 –Ω–∞—à–ª–∞: ${test1.length} - ${test1.map(m => m[0]).join(', ')}`);
        console.log(`      Regex2 –Ω–∞—à–ª–∞: ${test2.length} - ${test2.map(m => m[0]).join(', ')}`);
        console.log(`      Regex3 –Ω–∞—à–ª–∞: ${test3.length} - ${test3.map(m => m[0]).join(', ')}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
        const matches1 = [...description.matchAll(regex1)];
        const matches2 = [...description.matchAll(regex2)];
        const matches3 = [...description.matchAll(regex3)];
        
        console.log(`   üìä –ù–ê –†–ï–ê–õ–¨–ù–û–ú –û–ü–ò–°–ê–ù–ò–ò:`);
        console.log(`      Regex1 –Ω–∞—à–ª–∞: ${matches1.length} - ${matches1.map(m => m[0]).join(', ')}`);
        console.log(`      Regex2 –Ω–∞—à–ª–∞: ${matches2.length} - ${matches2.map(m => m[0]).join(', ')}`);
        console.log(`      Regex3 –Ω–∞—à–ª–∞: ${matches3.length} - ${matches3.map(m => m[0]).join(', ')}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥—É–ª—è—Ä–∫—É
        const bestMatches = matches2.length > 0 ? matches2 : (matches3.length > 0 ? matches3 : matches1);
        
        if (bestMatches.length > 0) {
            console.log(`   üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú: ${bestMatches.length} —Å—Å—ã–ª–æ–∫`);
            
            bestMatches.forEach((match, linkIndex) => {
                const fullLink = match[0];
                
                // –î–æ–±–∞–≤–ª—è–µ–º https:// –µ—Å–ª–∏ –Ω–µ—Ç
                const completeLink = fullLink.startsWith('http') ? fullLink : `https://${fullLink}`;
                const isInvite = fullLink.includes('/+');
                
                console.log(`      ${linkIndex + 1}. ${completeLink} (${isInvite ? 'invite' : 'public'})`);
                
                telegramLinks.push({
                    videoId: video.videoId,
                    videoTitle: video.title,
                    channelTitle: video.channelTitle,
                    telegramLink: completeLink,
                    identifier: fullLink.split('/').pop(),
                    isInviteLink: isInvite
                });
            });
        } else {
            console.log(`   ‚ùå –ù–ò –û–î–ù–ê –†–ï–ì–£–õ–Ø–†–ö–ê –ù–ï –ù–ê–®–õ–ê –°–°–´–õ–ö–ò`);
        }
    });
    
    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    const uniqueLinks = [];
    const seenLinks = new Set();
    
    telegramLinks.forEach(link => {
        if (!seenLinks.has(link.telegramLink)) {
            seenLinks.add(link.telegramLink);
            uniqueLinks.push(link);
        }
    });
    
    console.log(`\nüìä –ò–¢–û–ì–û: –Ω–∞–π–¥–µ–Ω–æ ${telegramLinks.length} —Å—Å—ã–ª–æ–∫, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueLinks.length}`);

    
    
    return uniqueLinks;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –≤–∏–¥–µ–æ
async getVideoDetails(videoIds) {
    try {
        console.log(`–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${videoIds.length} –≤–∏–¥–µ–æ...`);
        
        // YouTube API –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ 50 –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑
        const batchSize = 50;
        const allDetails = [];
        
        for (let i = 0; i < videoIds.length; i += batchSize) {
            const batch = videoIds.slice(i, i + batchSize);
            
            const response = await this.youtube.videos.list({
                part: 'snippet',
                id: batch.join(',')
            });
            
            if (response.data.items) {
                allDetails.push(...response.data.items);
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (i + batchSize < videoIds.length) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π: ${allDetails.length}`);
        
        return allDetails;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∏–¥–µ–æ:', error);
        return [];
    }
}
}

module.exports = YouTubeParser;